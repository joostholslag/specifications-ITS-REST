{
	"info": {
		"_postman_id": "8605f312-97a2-41b8-af9e-3198ae27af0a",
		"name": "EHR API",
		"description": "## Description\n\n### Purpose\n\nThis specification describes service endpoints, resources and operations as well as details of requests and responses that interacts with EHR openEHR API in a RESTful manner.\n\n### Related Documents\n\nPrerequisite documents for reading this document include:\n\n- The [EHR Information Model](https://specifications.openehr.org/releases/RM/latest/ehr.html#_the_ehr_information_model)\n\nRelated documents include:\n\n- The [openEHR Architecture Overview](https://specifications.openehr.org/releases/BASE/latest/architecture_overview.html)\n- The [openEHR Global Class Index](https://specifications.openehr.org/classes)\n- The [XML-Schemas (XSD)](https://specifications.openehr.org/releases/ITS-XML/latest)\n- The [JSON-Schemas](https://specifications.openehr.org/releases/ITS-JSON/latest) and [Simplified Data Template (SDT)](simplified_data_template.html)\n- The [openEHR Platform Abstract Service Model](https://specifications.openehr.org/releases/SM/development/openehr_platform.html)\n\n### Status\n\nThis specification is in the `STABLE` state, and can be downloaded as [OpenAPI specification](https://spec.openapis.org/oas/v3.0.3) file (in YAML format) [for validation](computable/OAS/ehr-validation.openapi.yaml), or [for code generators](computable/OAS/ehr-codegen.openapi.yaml).\nUsers are encouraged to comment on and/or advise on these paragraphs as well as the main content.\n\nThe development version of this document can be found at <https://specifications.openehr.org/releases/ITS-REST/development/ehr.html>.\n\n\nContact Support:\n Name: Specifications Editorial Committee openEHR\n Email: info@openehr.org",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "EHR",
			"item": [
				{
					"name": "Create EHR",
					"id": "62061033-328e-4f9e-b3c8-f7b58d86827e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
								"key": "Prefer",
								"value": "return=minimal"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"archetype_node_id\": \"do aliquip\",\n  \"is_modifiable\": true,\n  \"is_queryable\": true,\n  \"name\": {},\n  \"subject\": {},\n  \"_type\": \"<string>\",\n  \"other_details\": {},\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/ehr",
						"description": "Create a new `EHR` with an auto-generated identifier.\n\nAn EHR_STATUS resource needs to be always created and committed in the new EHR.\nThis resource MAY be also supplied by the client as the request body. \nIf not supplied, a default EHR_STATUS will be used by the service with following attributes:\n  - `is_queryable`: true\n  - `is_modifiable`: true\n  - `subject`: a PARTY_SELF object\n\nAll other required EHR attributes and resources will be automatically created as needed by the [EHR creation semantics](https://specifications.openehr.org/releases/RM/latest/ehr.html#_ehr_creation_semantics).\n"
					},
					"response": [
						{
							"id": "ad34ffa4-72cf-410c-95ae-2ad82ef13d82",
							"name": "`201 Created` is returned when the EHR has been successfully created. \nThe new EHR resource is returned in the body when the request's `Prefer` header value is `return=representation`, otherwise only headers are returned.\n",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"archetype_node_id\": \"do aliquip\",\n  \"is_modifiable\": true,\n  \"is_queryable\": true,\n  \"name\": {},\n  \"subject\": {},\n  \"_type\": \"<string>\",\n  \"other_details\": {},\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/ehr"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "ETag",
									"value": ""
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "Location",
									"value": ""
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"system_id\": {\n    \"value\": \"<string>\",\n    \"_type\": \"<string>\"\n  },\n  \"ehr_id\": {\n    \"value\": \"<string>\",\n    \"_type\": \"<string>\"\n  },\n  \"ehr_status\": {\n    \"namespace\": \"<string>\",\n    \"type\": \"<string>\",\n    \"id\": {\n      \"value\": \"<string>\",\n      \"_type\": \"<string>\"\n    }\n  },\n  \"ehr_access\": {\n    \"namespace\": \"<string>\",\n    \"type\": \"<string>\",\n    \"id\": {\n      \"value\": \"<string>\",\n      \"_type\": \"<string>\"\n    }\n  },\n  \"time_created\": {\n    \"value\": \"1945-10-14T14:16:48.037Z\",\n    \"_type\": \"DV_TEMPORAL\",\n    \"accuracy\": {},\n    \"magnitude_status\": \"=\",\n    \"normal_status\": {},\n    \"normal_range\": {}\n  }\n}"
						},
						{
							"id": "a1e131c3-6085-4cad-9798-f480fb8f3c96",
							"name": "`400 Bad Request` is returned when the request could not be parsed or is invalid (e.g. malformed request URL syntax, missing required header or parameter, or syntactically invalid header, parameter or content). \nThe response body MAY contain error details",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"archetype_node_id\": \"do aliquip\",\n  \"is_modifiable\": true,\n  \"is_queryable\": true,\n  \"name\": {},\n  \"subject\": {},\n  \"_type\": \"<string>\",\n  \"other_details\": {},\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/ehr"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"message\": \"<string>\",\n  \"validationErrors\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}"
						},
						{
							"id": "214103b6-27b1-4c89-80c6-c6d286c85afd",
							"name": "`409 Conflict` Unable to create a new EHR due to a conflict with an already existing EHR with the same subject id, namespace pair, whenever EHR_STATUS is supplied.\n",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"archetype_node_id\": \"do aliquip\",\n  \"is_modifiable\": true,\n  \"is_queryable\": true,\n  \"name\": {},\n  \"subject\": {},\n  \"_type\": \"<string>\",\n  \"other_details\": {},\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/ehr"
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Get EHR by subject id",
					"id": "ba17dd7d-aca2-401c-9daa-69aef0c40a01",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/ehr?subject_id=<string>&subject_namespace=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ehr"
							],
							"query": [
								{
									"description": "(Required) The EHR subject id.\n",
									"key": "subject_id",
									"value": "<string>"
								},
								{
									"description": "(Required) The EHR subject id namespace.\n",
									"key": "subject_namespace",
									"value": "<string>"
								}
							]
						},
						"description": "Retrieve the EHR with the specified `subject_id` and `subject_namespace`.\n\nThese subject parameters will be matched against EHR's EHR_STATUS.subject.external_ref.id.value and \nEHR_STATUS.subject.external_ref.namespace values.\n"
					},
					"response": [
						{
							"id": "1a11703e-05cc-42ff-9e8f-327fb29b2cd3",
							"name": "`200 OK` is returned when the requested EHR resource is successfully retrieved.\n",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ehr?subject_id=<string>&subject_namespace=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr"
									],
									"query": [
										{
											"description": "(Required) The EHR subject id.\n",
											"key": "subject_id",
											"value": "<string>"
										},
										{
											"description": "(Required) The EHR subject id namespace.\n",
											"key": "subject_namespace",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"system_id\": {\n    \"value\": \"<string>\",\n    \"_type\": \"<string>\"\n  },\n  \"ehr_id\": {\n    \"value\": \"<string>\",\n    \"_type\": \"<string>\"\n  },\n  \"ehr_status\": {\n    \"namespace\": \"<string>\",\n    \"type\": \"<string>\",\n    \"id\": {\n      \"value\": \"<string>\",\n      \"_type\": \"<string>\"\n    }\n  },\n  \"ehr_access\": {\n    \"namespace\": \"<string>\",\n    \"type\": \"<string>\",\n    \"id\": {\n      \"value\": \"<string>\",\n      \"_type\": \"<string>\"\n    }\n  },\n  \"time_created\": {\n    \"value\": \"1945-10-14T14:16:48.037Z\",\n    \"_type\": \"DV_TEMPORAL\",\n    \"accuracy\": {},\n    \"magnitude_status\": \"=\",\n    \"normal_status\": {},\n    \"normal_range\": {}\n  }\n}"
						},
						{
							"id": "5685aa71-9cbf-488c-8313-89f599d30da3",
							"name": "`404 Not Found` is returned when an EHR with supplied subject parameters does not exist.\n",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ehr?subject_id=<string>&subject_namespace=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr"
									],
									"query": [
										{
											"description": "(Required) The EHR subject id.\n",
											"key": "subject_id",
											"value": "<string>"
										},
										{
											"description": "(Required) The EHR subject id namespace.\n",
											"key": "subject_namespace",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Create EHR with id",
					"id": "61f00600-3251-4757-b4fc-6246bae36a1a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
								"key": "Prefer",
								"value": "return=minimal"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"archetype_node_id\": \"do aliquip\",\n  \"is_modifiable\": true,\n  \"is_queryable\": true,\n  \"name\": {},\n  \"subject\": {},\n  \"_type\": \"<string>\",\n  \"other_details\": {},\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ehr/:ehr_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ehr",
								":ehr_id"
							],
							"variable": [
								{
									"id": "51e37f3b-4a91-498a-8d61-2f109db22c72",
									"key": "ehr_id",
									"value": "<uuid>",
									"description": "(Required) EHR identifier taken from EHR.ehr_id.value.\n"
								}
							]
						},
						"description": "Create a new EHR with the specified `ehr_id` identifier.\n\nThe value of the `ehr_id` unique identifier MUST be valid [HIER_OBJECT_ID](https://specifications.openehr.org/releases/BASE/latest/base_types.html#_hier_object_id_class) value. \nIt is strongly RECOMMENDED that an UUID always be used for this.\n\nAn EHR_STATUS resource needs to be always created and committed in the new EHR.\nThis resource MAY be also supplied by the client as the request body. \nIf not supplied, a default EHR_STATUS will be used by the service with following attributes:\n  - `is_queryable`: true\n  - `is_modifiable`: true\n  - `subject`: a PARTY_SELF object\n\nAll other required EHR attributes and resources will be automatically created as needed by the [EHR creation semantics](https://specifications.openehr.org/releases/RM/latest/ehr.html#_ehr_creation_semantics).\n"
					},
					"response": [
						{
							"id": "79000407-731a-428c-a560-f7b655dc1f56",
							"name": "`201 Created` is returned when the EHR has been successfully created. \nThe new EHR resource is returned in the body when the request's `Prefer` header value is `return=representation`, otherwise only headers are returned.\n",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"archetype_node_id\": \"do aliquip\",\n  \"is_modifiable\": true,\n  \"is_queryable\": true,\n  \"name\": {},\n  \"subject\": {},\n  \"_type\": \"<string>\",\n  \"other_details\": {},\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id"
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "ETag",
									"value": ""
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "Location",
									"value": ""
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"system_id\": {\n    \"value\": \"<string>\",\n    \"_type\": \"<string>\"\n  },\n  \"ehr_id\": {\n    \"value\": \"<string>\",\n    \"_type\": \"<string>\"\n  },\n  \"ehr_status\": {\n    \"namespace\": \"<string>\",\n    \"type\": \"<string>\",\n    \"id\": {\n      \"value\": \"<string>\",\n      \"_type\": \"<string>\"\n    }\n  },\n  \"ehr_access\": {\n    \"namespace\": \"<string>\",\n    \"type\": \"<string>\",\n    \"id\": {\n      \"value\": \"<string>\",\n      \"_type\": \"<string>\"\n    }\n  },\n  \"time_created\": {\n    \"value\": \"1945-10-14T14:16:48.037Z\",\n    \"_type\": \"DV_TEMPORAL\",\n    \"accuracy\": {},\n    \"magnitude_status\": \"=\",\n    \"normal_status\": {},\n    \"normal_range\": {}\n  }\n}"
						},
						{
							"id": "d94d1167-771e-4aa3-a8ec-db49eea0ec33",
							"name": "`400 Bad Request` is returned when the request could not be parsed or is invalid (e.g. malformed request URL syntax, missing required header or parameter, or syntactically invalid header, parameter or content). \nThe response body MAY contain error details",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"archetype_node_id\": \"do aliquip\",\n  \"is_modifiable\": true,\n  \"is_queryable\": true,\n  \"name\": {},\n  \"subject\": {},\n  \"_type\": \"<string>\",\n  \"other_details\": {},\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id"
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"message\": \"<string>\",\n  \"validationErrors\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}"
						},
						{
							"id": "fd87254b-b56e-48a1-af60-9b19c313ef65",
							"name": "`409 Conflict` Unable to create a new EHR due to a conflict with an already existing EHR. \nCan happen when the supplied `ehr_id` is already used by an existing EHR.\n",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"archetype_node_id\": \"do aliquip\",\n  \"is_modifiable\": true,\n  \"is_queryable\": true,\n  \"name\": {},\n  \"subject\": {},\n  \"_type\": \"<string>\",\n  \"other_details\": {},\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id"
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Get EHR by id",
					"id": "7cd24038-9c74-4830-aa01-19f9084ba68b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/ehr/:ehr_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ehr",
								":ehr_id"
							],
							"variable": [
								{
									"id": "607e306a-8b5d-411b-97d5-1c06b803b84b",
									"key": "ehr_id",
									"value": "<uuid>",
									"description": "(Required) EHR identifier taken from EHR.ehr_id.value.\n"
								}
							]
						},
						"description": "Retrieve the EHR with the specified `ehr_id`.\n"
					},
					"response": [
						{
							"id": "fcea616f-720a-4b35-8470-9fc7bd83d780",
							"name": "`200 OK` is returned when the requested EHR resource is successfully retrieved.\n",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id"
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"system_id\": {\n    \"value\": \"<string>\",\n    \"_type\": \"<string>\"\n  },\n  \"ehr_id\": {\n    \"value\": \"<string>\",\n    \"_type\": \"<string>\"\n  },\n  \"ehr_status\": {\n    \"namespace\": \"<string>\",\n    \"type\": \"<string>\",\n    \"id\": {\n      \"value\": \"<string>\",\n      \"_type\": \"<string>\"\n    }\n  },\n  \"ehr_access\": {\n    \"namespace\": \"<string>\",\n    \"type\": \"<string>\",\n    \"id\": {\n      \"value\": \"<string>\",\n      \"_type\": \"<string>\"\n    }\n  },\n  \"time_created\": {\n    \"value\": \"1945-10-14T14:16:48.037Z\",\n    \"_type\": \"DV_TEMPORAL\",\n    \"accuracy\": {},\n    \"magnitude_status\": \"=\",\n    \"normal_status\": {},\n    \"normal_range\": {}\n  }\n}"
						},
						{
							"id": "89238dcc-f415-47e5-9a80-15524618d58e",
							"name": "`404 Not Found` is returned when an EHR with `ehr_id` does not exist.\n",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id"
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				}
			],
			"id": "73e78014-52ca-4dfa-9bf6-27fc1345c126",
			"description": "Management of [EHRs](https://specifications.openehr.org/releases/RM/latest/ehr.html#_ehr_class).\nActions upon resources of this group are also formally described in the [I_EHR_SERVICE](https://specifications.openehr.org/releases/SM/development/openehr_platform.html#_i_ehr_service_interface) Abstract Service Model interface.\n"
		},
		{
			"name": "EHR_STATUS",
			"item": [
				{
					"name": "Get EHR_STATUS by version id",
					"id": "6811de9b-ef2c-4fe2-b51e-2365622c8df1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/ehr/:ehr_id/ehr_status/:version_uid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ehr",
								":ehr_id",
								"ehr_status",
								":version_uid"
							],
							"variable": [
								{
									"id": "c0562e75-66cd-44d1-a94b-34978cd57fdb",
									"key": "ehr_id",
									"value": "<uuid>",
									"description": "(Required) EHR identifier taken from EHR.ehr_id.value.\n"
								},
								{
									"id": "448375ec-9a9e-4bb6-a9d7-f3c7a740df6e",
									"key": "version_uid",
									"value": "<string>",
									"description": "(Required) VERSION identifier taken from VERSION.uid.value.\n"
								}
							]
						},
						"description": "Retrieves a particular version of the EHR_STATUS identified by `version_uid` and associated with the EHR identified by `ehr_id`.\n\nWhen there are ITEM_TAGs associated with the retrieved EHR_STATUS, they will be returned as `openehr-item-tag` response header.\n"
					},
					"response": [
						{
							"id": "1a9cc02b-1720-48b0-ac5e-6dccf84ea634",
							"name": "`200 OK` is returned when the requested EHR_STATUS is successfully retrieved.\n",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/ehr_status/:version_uid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"ehr_status",
										":version_uid"
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "version_uid"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "ETag",
									"value": ""
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "Location",
									"value": ""
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "openehr-item-tag",
									"value": ""
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"archetype_node_id\": \"do aliquip\",\n  \"is_modifiable\": true,\n  \"is_queryable\": true,\n  \"name\": {},\n  \"subject\": {},\n  \"_type\": \"<string>\",\n  \"other_details\": {},\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}"
						},
						{
							"id": "ec7e8639-351e-462a-b921-18797c436489",
							"name": "`404 Not Found` is returned when an EHR with `ehr_id` does not exist, or when the `version_uid` does not exist.\n",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/ehr_status/:version_uid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"ehr_status",
										":version_uid"
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "version_uid"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Get EHR_STATUS at time",
					"id": "039f90c6-83f0-40ae-9dae-0ac660700865",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/ehr/:ehr_id/ehr_status?version_at_time=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ehr",
								":ehr_id",
								"ehr_status"
							],
							"query": [
								{
									"description": "A given time in the extended ISO 8601 format.\n",
									"key": "version_at_time",
									"value": "<string>"
								}
							],
							"variable": [
								{
									"id": "2444873d-287a-4240-9ff3-cf458c85a458",
									"key": "ehr_id",
									"value": "<uuid>",
									"description": "(Required) EHR identifier taken from EHR.ehr_id.value.\n"
								}
							]
						},
						"description": "Retrieves a version of the EHR_STATUS associated with the EHR identified by `ehr_id`.\n\nIf `version_at_time` is supplied, retrieves the version extant _at specified time_, otherwise retrieves the _latest_ EHR_STATUS version.\n\nWhen there are ITEM_TAGs associated with the retrieved EHR_STATUS, they will be returned as `openehr-item-tag` response header.\n"
					},
					"response": [
						{
							"id": "bd64b052-f4e5-414d-abca-8a20dcde3cd1",
							"name": "`200 OK` is returned when the requested EHR_STATUS is successfully retrieved.\n",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/ehr_status?version_at_time=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"ehr_status"
									],
									"query": [
										{
											"description": "A given time in the extended ISO 8601 format.\n",
											"key": "version_at_time",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "ETag",
									"value": ""
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "Location",
									"value": ""
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "openehr-item-tag",
									"value": ""
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"archetype_node_id\": \"do aliquip\",\n  \"is_modifiable\": true,\n  \"is_queryable\": true,\n  \"name\": {},\n  \"subject\": {},\n  \"_type\": \"<string>\",\n  \"other_details\": {},\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}"
						},
						{
							"id": "8d57a615-beeb-4134-bace-6516cc5e6182",
							"name": "`400 Bad Request` is returned when the request could not be parsed or is invalid (e.g. malformed request URL syntax, missing required header or parameter, or syntactically invalid header, parameter or content). \nThe response body MAY contain error details",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/ehr_status?version_at_time=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"ehr_status"
									],
									"query": [
										{
											"description": "A given time in the extended ISO 8601 format.\n",
											"key": "version_at_time",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"message\": \"<string>\",\n  \"validationErrors\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}"
						},
						{
							"id": "618bd432-ab10-4858-a930-5bb83998ad75",
							"name": "`404 Not Found` is returned when an EHR with `ehr_id` does not exist, or when a version of the resource identified by the request parameters (at specified `version_at_time`) does not exist.\n",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/ehr_status?version_at_time=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"ehr_status"
									],
									"query": [
										{
											"description": "A given time in the extended ISO 8601 format.\n",
											"key": "version_at_time",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Update EHR_STATUS",
					"id": "74323f1d-9e95-411e-8068-187fb921f797",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"description": "(Required) Header to make the request conditional. \nTogether with `ETag` request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\"mid-air collisions\").\nThe format is always an `version_uid` identifier enclosed by double quotes.\nThe operation will be performed only if the existing latest `version_uid` of the resource (i.e. the `preceding_version_uid`) matches this header's value.\n",
								"key": "If-Match",
								"value": "<string>"
							},
							{
								"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
								"key": "Prefer",
								"value": "return=minimal"
							},
							{
								"description": "The (semicolon-separated) list of all ITEM_TAG to be set or updated and associated with the given VERSION or VERSIONED_OBJECT.\n",
								"key": "openehr-item-tag",
								"value": "[object Object],[object Object]"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"archetype_node_id\": \"do aliquip\",\n  \"is_modifiable\": true,\n  \"is_queryable\": true,\n  \"name\": {},\n  \"subject\": {},\n  \"_type\": \"<string>\",\n  \"other_details\": {},\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ehr/:ehr_id/ehr_status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ehr",
								":ehr_id",
								"ehr_status"
							],
							"variable": [
								{
									"id": "02d1dad2-2c6f-4246-93cc-1ccb0254ca48",
									"key": "ehr_id",
									"value": "<uuid>",
									"description": "(Required) EHR identifier taken from EHR.ehr_id.value.\n"
								}
							]
						},
						"description": "Updates EHR_STATUS associated with the EHR identified by `ehr_id`.\n\nThe existing latest `version_uid` of EHR_STATUS resource (i.e. the `preceding_version_uid`) must be specified in the `If-Match` header.\n\nA list of ITEM_TAGs can be associated with the updated EHR_STATUS, in which case a `openehr-item-tag` request header is needed to be set as well. \nThe corresponding response header will return ITEM_TAGs as they were set by the server.\n\nThe response will contain the updated EHR_STATUS resource when the `Prefer` header has a value of `return=representation`.\n"
					},
					"response": [
						{
							"id": "99ab8c27-3230-47fb-b66c-ada18949ba9d",
							"name": "`200 OK` is returned when the EHR_STATUS is successfully updated, and the updated resource is returned in the body when `Prefer` header value is `return=representation`.\n",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "(Required) Header to make the request conditional. \nTogether with `ETag` request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\"mid-air collisions\").\nThe format is always an `version_uid` identifier enclosed by double quotes.\nThe operation will be performed only if the existing latest `version_uid` of the resource (i.e. the `preceding_version_uid`) matches this header's value.\n",
										"key": "If-Match",
										"value": "<string>"
									},
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"description": "The (semicolon-separated) list of all ITEM_TAG to be set or updated and associated with the given VERSION or VERSIONED_OBJECT.\n",
										"key": "openehr-item-tag",
										"value": "[object Object],[object Object]"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"archetype_node_id\": \"do aliquip\",\n  \"is_modifiable\": true,\n  \"is_queryable\": true,\n  \"name\": {},\n  \"subject\": {},\n  \"_type\": \"<string>\",\n  \"other_details\": {},\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/ehr_status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"ehr_status"
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "ETag",
									"value": ""
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "Location",
									"value": ""
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "openehr-item-tag",
									"value": ""
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"archetype_node_id\": \"do aliquip\",\n  \"is_modifiable\": true,\n  \"is_queryable\": true,\n  \"name\": {},\n  \"subject\": {},\n  \"_type\": \"<string>\",\n  \"other_details\": {},\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}"
						},
						{
							"id": "d746ddfe-6dde-4070-8dfc-5fcd58c4f5a6",
							"name": "`204 No Content` is returned when the `Prefer` header is missing or is set to `return=minimal`.\n",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "(Required) Header to make the request conditional. \nTogether with `ETag` request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\"mid-air collisions\").\nThe format is always an `version_uid` identifier enclosed by double quotes.\nThe operation will be performed only if the existing latest `version_uid` of the resource (i.e. the `preceding_version_uid`) matches this header's value.\n",
										"key": "If-Match",
										"value": "<string>"
									},
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"description": "The (semicolon-separated) list of all ITEM_TAG to be set or updated and associated with the given VERSION or VERSIONED_OBJECT.\n",
										"key": "openehr-item-tag",
										"value": "[object Object],[object Object]"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"archetype_node_id\": \"do aliquip\",\n  \"is_modifiable\": true,\n  \"is_queryable\": true,\n  \"name\": {},\n  \"subject\": {},\n  \"_type\": \"<string>\",\n  \"other_details\": {},\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/ehr_status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"ehr_status"
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "ETag",
									"value": ""
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "Location",
									"value": ""
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "openehr-item-tag",
									"value": ""
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "6b90ccf5-53ed-4c7d-a9b4-d19172c4031c",
							"name": "`400 Bad Request` is returned when the request could not be parsed or is invalid (e.g. malformed request URL syntax, missing required header or parameter, or syntactically invalid header, parameter or content). \nThe response body MAY contain error details",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "(Required) Header to make the request conditional. \nTogether with `ETag` request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\"mid-air collisions\").\nThe format is always an `version_uid` identifier enclosed by double quotes.\nThe operation will be performed only if the existing latest `version_uid` of the resource (i.e. the `preceding_version_uid`) matches this header's value.\n",
										"key": "If-Match",
										"value": "<string>"
									},
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"description": "The (semicolon-separated) list of all ITEM_TAG to be set or updated and associated with the given VERSION or VERSIONED_OBJECT.\n",
										"key": "openehr-item-tag",
										"value": "[object Object],[object Object]"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"archetype_node_id\": \"do aliquip\",\n  \"is_modifiable\": true,\n  \"is_queryable\": true,\n  \"name\": {},\n  \"subject\": {},\n  \"_type\": \"<string>\",\n  \"other_details\": {},\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/ehr_status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"ehr_status"
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"message\": \"<string>\",\n  \"validationErrors\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}"
						},
						{
							"id": "826a61ba-dd11-4e16-b560-ada277ff853b",
							"name": "`404 Not Found` is returned when an EHR with `ehr_id` does not exist.\n",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "(Required) Header to make the request conditional. \nTogether with `ETag` request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\"mid-air collisions\").\nThe format is always an `version_uid` identifier enclosed by double quotes.\nThe operation will be performed only if the existing latest `version_uid` of the resource (i.e. the `preceding_version_uid`) matches this header's value.\n",
										"key": "If-Match",
										"value": "<string>"
									},
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"description": "The (semicolon-separated) list of all ITEM_TAG to be set or updated and associated with the given VERSION or VERSIONED_OBJECT.\n",
										"key": "openehr-item-tag",
										"value": "[object Object],[object Object]"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"archetype_node_id\": \"do aliquip\",\n  \"is_modifiable\": true,\n  \"is_queryable\": true,\n  \"name\": {},\n  \"subject\": {},\n  \"_type\": \"<string>\",\n  \"other_details\": {},\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/ehr_status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"ehr_status"
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "5e13ff40-4123-4c9d-9530-2f65d1e2e2ad",
							"name": "`412 Precondition Failed` is returned when `If-Match` request header doesn't match the latest version on the service side.\nReturns also latest `version_uid` in the `Location` and `ETag` headers.\n",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "(Required) Header to make the request conditional. \nTogether with `ETag` request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\"mid-air collisions\").\nThe format is always an `version_uid` identifier enclosed by double quotes.\nThe operation will be performed only if the existing latest `version_uid` of the resource (i.e. the `preceding_version_uid`) matches this header's value.\n",
										"key": "If-Match",
										"value": "<string>"
									},
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"description": "The (semicolon-separated) list of all ITEM_TAG to be set or updated and associated with the given VERSION or VERSIONED_OBJECT.\n",
										"key": "openehr-item-tag",
										"value": "[object Object],[object Object]"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"archetype_node_id\": \"do aliquip\",\n  \"is_modifiable\": true,\n  \"is_queryable\": true,\n  \"name\": {},\n  \"subject\": {},\n  \"_type\": \"<string>\",\n  \"other_details\": {},\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/ehr_status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"ehr_status"
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "Precondition Failed",
							"code": 412,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "ETag",
									"value": ""
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "Location",
									"value": ""
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Get versioned EHR_STATUS",
					"id": "4b38edf7-d398-4fd8-87ef-1a91d3729df5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/ehr/:ehr_id/versioned_ehr_status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ehr",
								":ehr_id",
								"versioned_ehr_status"
							],
							"variable": [
								{
									"id": "19cb6cab-09ba-4959-9639-dc7095622622",
									"key": "ehr_id",
									"value": "<uuid>",
									"description": "(Required) EHR identifier taken from EHR.ehr_id.value.\n"
								}
							]
						},
						"description": "Retrieves a VERSIONED_EHR_STATUS associated with an EHR identified by `ehr_id`.\n"
					},
					"response": [
						{
							"id": "6ffcb0fd-f8e0-4bfc-ab59-0156236122e4",
							"name": "`200 OK` is returned when the requested VERSIONED_EHR_STATUS is successfully retrieved.\n",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/versioned_ehr_status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"versioned_ehr_status"
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"uid\": {\n    \"value\": \"<string>\",\n    \"_type\": \"<string>\"\n  },\n  \"owner_id\": {\n    \"namespace\": \"<string>\",\n    \"type\": \"<string>\",\n    \"id\": {\n      \"value\": \"<string>\",\n      \"_type\": \"<string>\"\n    }\n  },\n  \"time_created\": {\n    \"value\": \"1968-06-03T17:44:23.439Z\",\n    \"_type\": \"DV_TEMPORAL\",\n    \"accuracy\": {},\n    \"magnitude_status\": \"=\",\n    \"normal_status\": {},\n    \"normal_range\": {}\n  },\n  \"_type\": \"<string>\"\n}"
						},
						{
							"id": "2ef147ad-41b5-4c13-ad94-fd883031696e",
							"name": "`404 Not Found` is returned when an EHR with `ehr_id` does not exist.\n",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/versioned_ehr_status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"versioned_ehr_status"
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Get versioned EHR_STATUS revision history",
					"id": "692c171f-1ec7-448a-a63f-75da4ab056c1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/ehr/:ehr_id/versioned_ehr_status/revision_history",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ehr",
								":ehr_id",
								"versioned_ehr_status",
								"revision_history"
							],
							"variable": [
								{
									"id": "811eb7fe-68b9-4939-9d09-98f337af74aa",
									"key": "ehr_id",
									"value": "<uuid>",
									"description": "(Required) EHR identifier taken from EHR.ehr_id.value.\n"
								}
							]
						},
						"description": "Retrieves revision history of the VERSIONED_EHR_STATUS associated with the EHR identified by `ehr_id`.\n"
					},
					"response": [
						{
							"id": "82a79113-3cea-4c43-982f-a836cb62c175",
							"name": "`200 OK` is returned when the requested REVISION_HISTORY is successfully retrieved.\n",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/versioned_ehr_status/revision_history",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"versioned_ehr_status",
										"revision_history"
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"items\": [\n    {\n      \"version_id\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      },\n      \"audits\": [\n        {\n          \"system_id\": \"<string>\",\n          \"time_committed\": {\n            \"value\": \"1978-11-09T08:30:51.076Z\",\n            \"_type\": \"DV_TEMPORAL\",\n            \"accuracy\": {},\n            \"magnitude_status\": \"=\",\n            \"normal_status\": {},\n            \"normal_range\": {}\n          },\n          \"change_type\": {\n            \"defining_code\": {},\n            \"value\": \"Ut in magna\",\n            \"_type\": \"DV_TEXT\",\n            \"hyperlink\": {},\n            \"formatting\": \"deserunt Exce\",\n            \"language\": {},\n            \"encoding\": {}\n          },\n          \"committer\": {\n            \"_type\": \"<string>\",\n            \"external_ref\": {\n              \"namespace\": \"<string>\",\n              \"type\": \"<string>\",\n              \"id\": {\n                \"value\": \"<string>\",\n                \"_type\": \"<string>\"\n              }\n            }\n          },\n          \"_type\": \"AUDIT_DETAILS\",\n          \"description\": {\n            \"value\": \"dolor\",\n            \"_type\": \"DV_TEXT\",\n            \"hyperlink\": {},\n            \"formatting\": \"officia eu commodo aliquip\",\n            \"language\": {},\n            \"encoding\": {}\n          }\n        },\n        {\n          \"system_id\": \"<string>\",\n          \"time_committed\": {\n            \"value\": \"1961-01-29T14:04:44.412Z\",\n            \"_type\": \"DV_TEMPORAL\",\n            \"accuracy\": {},\n            \"magnitude_status\": \"=\",\n            \"normal_status\": {},\n            \"normal_range\": {}\n          },\n          \"change_type\": {\n            \"defining_code\": {},\n            \"value\": \"occaecat cupidatat nulla\",\n            \"_type\": \"DV_TEXT\",\n            \"hyperlink\": {},\n            \"formatting\": \"officia Duis ea\",\n            \"language\": {},\n            \"encoding\": {}\n          },\n          \"committer\": {\n            \"_type\": \"<string>\",\n            \"external_ref\": {\n              \"namespace\": \"<string>\",\n              \"type\": \"<string>\",\n              \"id\": {\n                \"value\": \"<string>\",\n                \"_type\": \"<string>\"\n              }\n            }\n          },\n          \"_type\": \"AUDIT_DETAILS\",\n          \"description\": {\n            \"value\": \"eiusmod ipsum\",\n            \"_type\": \"DV_TEXT\",\n            \"hyperlink\": {},\n            \"formatting\": \"exercitation deserunt non proident\",\n            \"language\": {},\n            \"encoding\": {}\n          }\n        }\n      ]\n    },\n    {\n      \"version_id\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      },\n      \"audits\": [\n        {\n          \"system_id\": \"<string>\",\n          \"time_committed\": {\n            \"value\": \"1998-12-24T03:13:42.656Z\",\n            \"_type\": \"DV_TEMPORAL\",\n            \"accuracy\": {},\n            \"magnitude_status\": \"=\",\n            \"normal_status\": {},\n            \"normal_range\": {}\n          },\n          \"change_type\": {\n            \"defining_code\": {},\n            \"value\": \"sint veniam et\",\n            \"_type\": \"DV_TEXT\",\n            \"hyperlink\": {},\n            \"formatting\": \"sint dolore\",\n            \"language\": {},\n            \"encoding\": {}\n          },\n          \"committer\": {\n            \"_type\": \"<string>\",\n            \"external_ref\": {\n              \"namespace\": \"<string>\",\n              \"type\": \"<string>\",\n              \"id\": {\n                \"value\": \"<string>\",\n                \"_type\": \"<string>\"\n              }\n            }\n          },\n          \"_type\": \"AUDIT_DETAILS\",\n          \"description\": {\n            \"value\": \"Ut sunt nostrud\",\n            \"_type\": \"DV_TEXT\",\n            \"hyperlink\": {},\n            \"formatting\": \"sed aliquip tempor\",\n            \"language\": {},\n            \"encoding\": {}\n          }\n        },\n        {\n          \"system_id\": \"<string>\",\n          \"time_committed\": {\n            \"value\": \"1967-11-14T02:30:30.949Z\",\n            \"_type\": \"DV_TEMPORAL\",\n            \"accuracy\": {},\n            \"magnitude_status\": \"=\",\n            \"normal_status\": {},\n            \"normal_range\": {}\n          },\n          \"change_type\": {\n            \"defining_code\": {},\n            \"value\": \"laboris consectetur\",\n            \"_type\": \"DV_TEXT\",\n            \"hyperlink\": {},\n            \"formatting\": \"anim nostrud aliqua magna voluptate\",\n            \"language\": {},\n            \"encoding\": {}\n          },\n          \"committer\": {\n            \"_type\": \"<string>\",\n            \"external_ref\": {\n              \"namespace\": \"<string>\",\n              \"type\": \"<string>\",\n              \"id\": {\n                \"value\": \"<string>\",\n                \"_type\": \"<string>\"\n              }\n            }\n          },\n          \"_type\": \"AUDIT_DETAILS\",\n          \"description\": {\n            \"value\": \"aliqua fugiat eu enim\",\n            \"_type\": \"DV_TEXT\",\n            \"hyperlink\": {},\n            \"formatting\": \"mollit officia consequat aliquip\",\n            \"language\": {},\n            \"encoding\": {}\n          }\n        }\n      ]\n    }\n  ]\n}"
						},
						{
							"id": "205a7da5-f813-4479-921b-0d645bfae161",
							"name": "`404 Not Found` is returned when an EHR with `ehr_id` does not exist.\n",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/versioned_ehr_status/revision_history",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"versioned_ehr_status",
										"revision_history"
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Get versioned EHR_STATUS version at time",
					"id": "f051842d-4072-4084-9a75-3d953fddf35a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/ehr/:ehr_id/versioned_ehr_status/version?version_at_time=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ehr",
								":ehr_id",
								"versioned_ehr_status",
								"version"
							],
							"query": [
								{
									"description": "A given time in the extended ISO 8601 format.\n",
									"key": "version_at_time",
									"value": "<string>"
								}
							],
							"variable": [
								{
									"id": "b1b66167-10a7-4f95-b549-d8fe9260753f",
									"key": "ehr_id",
									"value": "<uuid>",
									"description": "(Required) EHR identifier taken from EHR.ehr_id.value.\n"
								}
							]
						},
						"description": "Retrieves a VERSION from the VERSIONED_EHR_STATUS associated with the EHR identified by `ehr_id`.\n\nIf `version_at_time` is supplied, retrieves the VERSION extant _at specified time_, otherwise retrieves the _latest_ VERSION.\n"
					},
					"response": [
						{
							"id": "eee664dd-164d-4ef8-90ec-3d93ab4f5c47",
							"name": "`200 OK` is returned when the requested VERSION is successfully retrieved.\n",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/versioned_ehr_status/version?version_at_time=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"versioned_ehr_status",
										"version"
									],
									"query": [
										{
											"description": "A given time in the extended ISO 8601 format.\n",
											"key": "version_at_time",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "ETag",
									"value": ""
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "Location",
									"value": ""
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"contribution\": {\n    \"namespace\": \"<string>\",\n    \"type\": \"<string>\",\n    \"id\": {\n      \"value\": \"<string>\",\n      \"_type\": \"<string>\"\n    }\n  },\n  \"commit_audit\": {\n    \"system_id\": \"<string>\",\n    \"time_committed\": {\n      \"value\": \"1956-08-30T04:23:06.982Z\",\n      \"_type\": \"DV_TEMPORAL\",\n      \"accuracy\": {},\n      \"magnitude_status\": \"=\",\n      \"normal_status\": {},\n      \"normal_range\": {}\n    },\n    \"change_type\": {\n      \"defining_code\": {},\n      \"value\": \"proident nisi aute\",\n      \"_type\": \"DV_TEXT\",\n      \"hyperlink\": {},\n      \"formatting\": \"cillum ut minim\",\n      \"language\": {},\n      \"encoding\": {}\n    },\n    \"committer\": {\n      \"_type\": \"<string>\",\n      \"external_ref\": {\n        \"namespace\": \"<string>\",\n        \"type\": \"<string>\",\n        \"id\": {\n          \"value\": \"<string>\",\n          \"_type\": \"<string>\"\n        }\n      }\n    },\n    \"_type\": \"AUDIT_DETAILS\",\n    \"description\": {\n      \"value\": \"eiusmod sit\",\n      \"_type\": \"DV_TEXT\",\n      \"hyperlink\": {},\n      \"formatting\": \"ut cillum dolor ipsum\",\n      \"language\": {},\n      \"encoding\": {}\n    }\n  },\n  \"data\": {\n    \"archetype_node_id\": \"dolor anim\",\n    \"is_modifiable\": true,\n    \"is_queryable\": true,\n    \"name\": {},\n    \"subject\": {},\n    \"_type\": \"<string>\",\n    \"other_details\": {},\n    \"uid\": {},\n    \"archetype_details\": {},\n    \"feeder_audit\": {}\n  },\n  \"_type\": \"<string>\",\n  \"signature\": \"<string>\"\n}"
						},
						{
							"id": "c6676d79-d4e6-48d5-a57e-58a233b5ffcd",
							"name": "`400 Bad Request` is returned when the request could not be parsed or is invalid (e.g. malformed request URL syntax, missing required header or parameter, or syntactically invalid header, parameter or content). \nThe response body MAY contain error details",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/versioned_ehr_status/version?version_at_time=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"versioned_ehr_status",
										"version"
									],
									"query": [
										{
											"description": "A given time in the extended ISO 8601 format.\n",
											"key": "version_at_time",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"message\": \"<string>\",\n  \"validationErrors\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}"
						},
						{
							"id": "5f02e2e0-6249-4056-88e4-bb3b5c03e43b",
							"name": "`404 Not Found` is returned when an EHR with `ehr_id` does not exist, or when a version of the resource identified by the request parameters (at specified `version_at_time`) does not exist.\n",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/versioned_ehr_status/version?version_at_time=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"versioned_ehr_status",
										"version"
									],
									"query": [
										{
											"description": "A given time in the extended ISO 8601 format.\n",
											"key": "version_at_time",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Get versioned EHR_STATUS version by id",
					"id": "5517f7ab-5563-49bb-9370-464e9e483745",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/ehr/:ehr_id/versioned_ehr_status/version/:version_uid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ehr",
								":ehr_id",
								"versioned_ehr_status",
								"version",
								":version_uid"
							],
							"variable": [
								{
									"id": "26c6b293-4b52-4948-b1fb-cbec13df9e51",
									"key": "ehr_id",
									"value": "<uuid>",
									"description": "(Required) EHR identifier taken from EHR.ehr_id.value.\n"
								},
								{
									"id": "d0a31023-775f-4911-9ea3-23bc9de7405e",
									"key": "version_uid",
									"value": "<string>",
									"description": "(Required) VERSION identifier taken from VERSION.uid.value.\n"
								}
							]
						},
						"description": "Retrieves a VERSION identified by `version_uid` of an EHR_STATUS associated with the EHR identified by `ehr_id`.\n"
					},
					"response": [
						{
							"id": "8046fcae-af42-4045-a7f0-f5aa195623fb",
							"name": "`200 OK` is returned when the requested VERSION is successfully retrieved.\n",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/versioned_ehr_status/version/:version_uid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"versioned_ehr_status",
										"version",
										":version_uid"
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "version_uid"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"contribution\": {\n    \"namespace\": \"<string>\",\n    \"type\": \"<string>\",\n    \"id\": {\n      \"value\": \"<string>\",\n      \"_type\": \"<string>\"\n    }\n  },\n  \"commit_audit\": {\n    \"system_id\": \"<string>\",\n    \"time_committed\": {\n      \"value\": \"1956-08-30T04:23:06.982Z\",\n      \"_type\": \"DV_TEMPORAL\",\n      \"accuracy\": {},\n      \"magnitude_status\": \"=\",\n      \"normal_status\": {},\n      \"normal_range\": {}\n    },\n    \"change_type\": {\n      \"defining_code\": {},\n      \"value\": \"proident nisi aute\",\n      \"_type\": \"DV_TEXT\",\n      \"hyperlink\": {},\n      \"formatting\": \"cillum ut minim\",\n      \"language\": {},\n      \"encoding\": {}\n    },\n    \"committer\": {\n      \"_type\": \"<string>\",\n      \"external_ref\": {\n        \"namespace\": \"<string>\",\n        \"type\": \"<string>\",\n        \"id\": {\n          \"value\": \"<string>\",\n          \"_type\": \"<string>\"\n        }\n      }\n    },\n    \"_type\": \"AUDIT_DETAILS\",\n    \"description\": {\n      \"value\": \"eiusmod sit\",\n      \"_type\": \"DV_TEXT\",\n      \"hyperlink\": {},\n      \"formatting\": \"ut cillum dolor ipsum\",\n      \"language\": {},\n      \"encoding\": {}\n    }\n  },\n  \"data\": {\n    \"archetype_node_id\": \"dolor anim\",\n    \"is_modifiable\": true,\n    \"is_queryable\": true,\n    \"name\": {},\n    \"subject\": {},\n    \"_type\": \"<string>\",\n    \"other_details\": {},\n    \"uid\": {},\n    \"archetype_details\": {},\n    \"feeder_audit\": {}\n  },\n  \"_type\": \"<string>\",\n  \"signature\": \"<string>\"\n}"
						},
						{
							"id": "5a2d915d-9bdf-4f53-9075-d3ab7eada675",
							"name": "`404 Not Found` is returned when an EHR with `ehr_id` does not exist, or when the `version_uid` does not exist.\n",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/versioned_ehr_status/version/:version_uid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"versioned_ehr_status",
										"version",
										":version_uid"
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "version_uid"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				}
			],
			"id": "beb7e5b0-926c-49d6-b74b-bb0ca9620a77",
			"description": "Management of [EHR_STATUS](https://specifications.openehr.org/releases/RM/latest/ehr.html#_ehr_status_class) and [VERSIONED_EHR_STATUS](https://specifications.openehr.org/releases/RM/latest/ehr.html#_versioned_ehr_status_class) resources.\nActions upon resources of this group are also formally described in the [I_EHR_STATUS](https://specifications.openehr.org/releases/SM/development/openehr_platform.html#_i_ehr_status_interface) Abstract Service Model interface.\n"
		},
		{
			"name": "COMPOSITION",
			"item": [
				{
					"name": "Create COMPOSITION",
					"id": "da1a5b7f-3495-435e-9812-70c5fac8f07e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
								"key": "Prefer",
								"value": "return=minimal"
							},
							{
								"description": "The (semicolon-separated) list of all ITEM_TAG to be set or updated and associated with the given VERSION or VERSIONED_OBJECT.\n",
								"key": "openehr-item-tag",
								"value": "[object Object],[object Object]"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"archetype_node_id\": \"anim exercitation\",\n  \"category\": {},\n  \"composer\": {},\n  \"content\": [],\n  \"context\": {},\n  \"language\": {},\n  \"name\": {},\n  \"territory\": {},\n  \"_type\": \"<string>\",\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ehr/:ehr_id/composition",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ehr",
								":ehr_id",
								"composition"
							],
							"variable": [
								{
									"id": "39524f85-8837-4599-9053-403e290126a0",
									"key": "ehr_id",
									"value": "<uuid>",
									"description": "(Required) EHR identifier taken from EHR.ehr_id.value.\n"
								}
							]
						},
						"description": "Creates the first version of a new COMPOSITION in the EHR identified by `ehr_id`.\n\nA list of ITEM_TAGs can be associated with the COMPOSITION, in which case a `openehr-item-tag` request header is needed to be set as well. \nThe corresponding response header will return ITEM_TAGs as they were set by the server.\n"
					},
					"response": [
						{
							"id": "3ac47a90-0d6e-4635-968b-03673530d234",
							"name": "`201 Created` is returned when the COMPOSITION was created. \nContent body is only returned when `Prefer` header has `return=representation`, otherwise only headers are returned.\n",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"description": "The (semicolon-separated) list of all ITEM_TAG to be set or updated and associated with the given VERSION or VERSIONED_OBJECT.\n",
										"key": "openehr-item-tag",
										"value": "[object Object],[object Object]"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"archetype_node_id\": \"anim exercitation\",\n  \"category\": {},\n  \"composer\": {},\n  \"content\": [],\n  \"context\": {},\n  \"language\": {},\n  \"name\": {},\n  \"territory\": {},\n  \"_type\": \"<string>\",\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/composition",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"composition"
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "ETag",
									"value": ""
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "Location",
									"value": ""
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "openehr-item-tag",
									"value": ""
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"archetype_node_id\": \"anim exercitation\",\n  \"category\": {},\n  \"composer\": {},\n  \"content\": [],\n  \"context\": {},\n  \"language\": {},\n  \"name\": {},\n  \"territory\": {},\n  \"_type\": \"<string>\",\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}"
						},
						{
							"id": "52b8daa4-2b07-4c9a-9247-0680dabcff93",
							"name": "`400 Bad Request` is returned when the request could not be parsed or is invalid (e.g. malformed request URL syntax, missing required header or parameter, or syntactically invalid header, parameter or content). \nThe response body MAY contain error details",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"description": "The (semicolon-separated) list of all ITEM_TAG to be set or updated and associated with the given VERSION or VERSIONED_OBJECT.\n",
										"key": "openehr-item-tag",
										"value": "[object Object],[object Object]"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"archetype_node_id\": \"anim exercitation\",\n  \"category\": {},\n  \"composer\": {},\n  \"content\": [],\n  \"context\": {},\n  \"language\": {},\n  \"name\": {},\n  \"territory\": {},\n  \"_type\": \"<string>\",\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/composition",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"composition"
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"message\": \"<string>\",\n  \"validationErrors\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}"
						},
						{
							"id": "0b5d4e4d-9e29-4bba-b670-e8c1c5402faf",
							"name": "`404 Not Found` is returned when an EHR with `ehr_id` does not exist.\n",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"description": "The (semicolon-separated) list of all ITEM_TAG to be set or updated and associated with the given VERSION or VERSIONED_OBJECT.\n",
										"key": "openehr-item-tag",
										"value": "[object Object],[object Object]"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"archetype_node_id\": \"anim exercitation\",\n  \"category\": {},\n  \"composer\": {},\n  \"content\": [],\n  \"context\": {},\n  \"language\": {},\n  \"name\": {},\n  \"territory\": {},\n  \"_type\": \"<string>\",\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/composition",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"composition"
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "1842e8b7-faee-4a1f-b91e-e730e43ee0b3",
							"name": "`422 Unprocessable Entity` is returned when the content type and syntax is correct, could be converted to a resource, but there are semantic validation errors, such as the underlying template is not known or is not validating the supplied resource.\n",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"description": "The (semicolon-separated) list of all ITEM_TAG to be set or updated and associated with the given VERSION or VERSIONED_OBJECT.\n",
										"key": "openehr-item-tag",
										"value": "[object Object],[object Object]"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"archetype_node_id\": \"anim exercitation\",\n  \"category\": {},\n  \"composer\": {},\n  \"content\": [],\n  \"context\": {},\n  \"language\": {},\n  \"name\": {},\n  \"territory\": {},\n  \"_type\": \"<string>\",\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/composition",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"composition"
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Get COMPOSITION",
					"id": "ddd134b4-017b-46cf-b8de-17ab35bf588b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/ehr/{{ehrId}}/composition/:uid_based_id?version_at_time=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ehr",
								"{{ehrId}}",
								"composition",
								":uid_based_id"
							],
							"query": [
								{
									"key": "version_at_time",
									"value": "<string>",
									"description": "A given time in the extended ISO 8601 format.\n"
								}
							],
							"variable": [
								{
									"key": "uid_based_id",
									"value": "<string>",
									"description": "(Required) An abstract identifier: it can take a form of an OBJECT_VERSION_ID identifier taken from VERSION.uid.value (i.e. a `version_uid`), or a form of a HIER_OBJECT_ID identifier taken from VERSIONED_OBJECT.uid.value (i.e. a `versioned_object_uid`).\n"
								}
							]
						},
						"description": "Retrieves a version of the COMPOSITION identified by `uid_based_id` and associated with the EHR identified by `ehr_id`.\n\nThe `uid_based_id` can take a form of an OBJECT_VERSION_ID identifier taken from VERSION.uid.value (i.e. a `version_uid`), or a form of a HIER_OBJECT_ID identifier taken from VERSIONED_OBJECT.uid.value (i.e. a `versioned_object_uid`).\nThe former is used to retrieve a specific known version of the COMPOSITION (e.g. one identified by `8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1`), whereas the later (e.g. an identifier like `8849182c-82ad-4088-a07f-48ead4180515`) is be used to retrieve a version from the version container whenever the _version_tree_id_ is unknown or irrelevant (such as when most recent version is requested).\n\nWhen the `uid_based_id` has the form of a HIER_OBJECT_ID, if the `version_at_time` is supplied, retrieves the version extant _at specified time_, otherwise retrieves the _latest_ COMPOSITION version.\n\nSee [Resource identification](overview.html#tag/Resources/Resource-identification) for more details about the identifiers usage and meaning.\n\nWhen there are ITEM_TAGs associated with the retrieved COMPOSITION, they will be returned as `openehr-item-tag` response header.\n"
					},
					"response": [
						{
							"id": "8eb42f19-a8da-4b04-ba05-a9d09187cd5c",
							"name": "`200 OK` is returned when the requested COMPOSITION is successfully retrieved.\n",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/composition/:uid_based_id?version_at_time=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"composition",
										":uid_based_id"
									],
									"query": [
										{
											"description": "A given time in the extended ISO 8601 format.\n",
											"key": "version_at_time",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "uid_based_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "ETag",
									"value": ""
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "Location",
									"value": ""
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "openehr-item-tag",
									"value": ""
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"archetype_node_id\": \"anim exercitation\",\n  \"category\": {},\n  \"composer\": {},\n  \"content\": [],\n  \"context\": {},\n  \"language\": {},\n  \"name\": {},\n  \"territory\": {},\n  \"_type\": \"<string>\",\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}"
						},
						{
							"id": "a90f4190-1043-4f62-808d-5559babdccd5",
							"name": "`204 No Content` is returned when the resource identified by the request parameters (at specified `version_at_time`) time has been deleted.\n",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/composition/:uid_based_id?version_at_time=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"composition",
										":uid_based_id"
									],
									"query": [
										{
											"description": "A given time in the extended ISO 8601 format.\n",
											"key": "version_at_time",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "uid_based_id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "65874b3f-0d11-4c93-8436-647d948b14d5",
							"name": "`404 Not Found` is returned when an EHR with `ehr_id` does not exist, or when a version of the resource identified by the request parameters (at specified `version_at_time`) does not exist.\n",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/composition/:uid_based_id?version_at_time=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"composition",
										":uid_based_id"
									],
									"query": [
										{
											"description": "A given time in the extended ISO 8601 format.\n",
											"key": "version_at_time",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "uid_based_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Update COMPOSITION",
					"id": "0165ece0-18de-4881-a9be-3efdd2341d20",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"description": "(Required) Header to make the request conditional. \nTogether with `ETag` request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\"mid-air collisions\").\nThe format is always an `version_uid` identifier enclosed by double quotes.\nThe operation will be performed only if the existing latest `version_uid` of the resource (i.e. the `preceding_version_uid`) matches this header's value.\n",
								"key": "If-Match",
								"value": "<string>"
							},
							{
								"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
								"key": "Prefer",
								"value": "return=minimal"
							},
							{
								"description": "The (semicolon-separated) list of all ITEM_TAG to be set or updated and associated with the given VERSION or VERSIONED_OBJECT.\n",
								"key": "openehr-item-tag",
								"value": "[object Object],[object Object]"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"archetype_node_id\": \"anim exercitation\",\n  \"category\": {},\n  \"composer\": {},\n  \"content\": [],\n  \"context\": {},\n  \"language\": {},\n  \"name\": {},\n  \"territory\": {},\n  \"_type\": \"<string>\",\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ehr/:ehr_id/composition/:uid_based_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ehr",
								":ehr_id",
								"composition",
								":uid_based_id"
							],
							"variable": [
								{
									"id": "688fea0c-4818-4e87-948c-b15b3ee65d9d",
									"key": "ehr_id",
									"value": "<uuid>",
									"description": "(Required) EHR identifier taken from EHR.ehr_id.value.\n"
								},
								{
									"id": "097b4d02-a0ca-45e8-946d-3435cf13cfc4",
									"key": "uid_based_id",
									"value": "<uuid>",
									"description": "(Required) An identifier in a form of a HIER_OBJECT_ID identifier taken from VERSIONED_OBJECT.uid.value (i.e. a `versioned_object_uid`).\n"
								}
							]
						},
						"description": "Updates COMPOSITION identified by `uid_based_id` and associated with the EHR identified by `ehr_id`.\n\nThe `uid_based_id` can take only a form of an HIER_OBJECT_ID identifier taken from VERSIONED_OBJECT.uid.value (i.e. a `versioned_object_uid`).\n\nIf the request body already contains a COMPOSITION.uid.value, it must match the `uid_based_id` in the URL. \n\nThe existing latest `version_uid` of COMPOSITION resource (i.e. the `preceding_version_uid`) must be specified in the `If-Match` header.\n\nA list of ITEM_TAGs can be associated with the updated COMPOSITION, in which case a `openehr-item-tag` request header is needed to be set as well. \nThe corresponding response header will return ITEM_TAGs as they were set by the server.\n"
					},
					"response": [
						{
							"id": "2847bb2c-61dd-4f30-9266-b831204b70d3",
							"name": "`200 OK` is returned when the COMPOSITION is successfully updated and the updated resource is returned in the body when `Prefer` header value is `return=representation`.\n",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "(Required) Header to make the request conditional. \nTogether with `ETag` request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\"mid-air collisions\").\nThe format is always an `version_uid` identifier enclosed by double quotes.\nThe operation will be performed only if the existing latest `version_uid` of the resource (i.e. the `preceding_version_uid`) matches this header's value.\n",
										"key": "If-Match",
										"value": "<string>"
									},
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"description": "The (semicolon-separated) list of all ITEM_TAG to be set or updated and associated with the given VERSION or VERSIONED_OBJECT.\n",
										"key": "openehr-item-tag",
										"value": "[object Object],[object Object]"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"archetype_node_id\": \"anim exercitation\",\n  \"category\": {},\n  \"composer\": {},\n  \"content\": [],\n  \"context\": {},\n  \"language\": {},\n  \"name\": {},\n  \"territory\": {},\n  \"_type\": \"<string>\",\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/composition/:uid_based_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"composition",
										":uid_based_id"
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "uid_based_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "ETag",
									"value": ""
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "Location",
									"value": ""
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "openehr-item-tag",
									"value": ""
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"archetype_node_id\": \"anim exercitation\",\n  \"category\": {},\n  \"composer\": {},\n  \"content\": [],\n  \"context\": {},\n  \"language\": {},\n  \"name\": {},\n  \"territory\": {},\n  \"_type\": \"<string>\",\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}"
						},
						{
							"id": "bd792232-13fd-4084-a68e-1fb66b5851fa",
							"name": "`400 Bad Request` is returned when the request could not be parsed or is invalid (e.g. malformed request URL syntax, missing required header or parameter, or syntactically invalid header, parameter or content). \nThe response body MAY contain error details",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "(Required) Header to make the request conditional. \nTogether with `ETag` request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\"mid-air collisions\").\nThe format is always an `version_uid` identifier enclosed by double quotes.\nThe operation will be performed only if the existing latest `version_uid` of the resource (i.e. the `preceding_version_uid`) matches this header's value.\n",
										"key": "If-Match",
										"value": "<string>"
									},
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"description": "The (semicolon-separated) list of all ITEM_TAG to be set or updated and associated with the given VERSION or VERSIONED_OBJECT.\n",
										"key": "openehr-item-tag",
										"value": "[object Object],[object Object]"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"archetype_node_id\": \"anim exercitation\",\n  \"category\": {},\n  \"composer\": {},\n  \"content\": [],\n  \"context\": {},\n  \"language\": {},\n  \"name\": {},\n  \"territory\": {},\n  \"_type\": \"<string>\",\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/composition/:uid_based_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"composition",
										":uid_based_id"
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "uid_based_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"message\": \"<string>\",\n  \"validationErrors\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}"
						},
						{
							"id": "331f0d3c-0795-4a55-86cc-6143adaed54c",
							"name": "`404 Not Found` is returned when an EHR with `ehr_id` does not exist, or when the `uid_based_id` does not exist.\n",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "(Required) Header to make the request conditional. \nTogether with `ETag` request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\"mid-air collisions\").\nThe format is always an `version_uid` identifier enclosed by double quotes.\nThe operation will be performed only if the existing latest `version_uid` of the resource (i.e. the `preceding_version_uid`) matches this header's value.\n",
										"key": "If-Match",
										"value": "<string>"
									},
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"description": "The (semicolon-separated) list of all ITEM_TAG to be set or updated and associated with the given VERSION or VERSIONED_OBJECT.\n",
										"key": "openehr-item-tag",
										"value": "[object Object],[object Object]"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"archetype_node_id\": \"anim exercitation\",\n  \"category\": {},\n  \"composer\": {},\n  \"content\": [],\n  \"context\": {},\n  \"language\": {},\n  \"name\": {},\n  \"territory\": {},\n  \"_type\": \"<string>\",\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/composition/:uid_based_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"composition",
										":uid_based_id"
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "uid_based_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "64e3d355-1a01-4764-a58f-9102fc819855",
							"name": "`412 Precondition Failed` is returned when `If-Match` request header doesn't match the latest version on the service side.\nReturns also latest `version_uid` in the `Location` and `ETag` headers.\n",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "(Required) Header to make the request conditional. \nTogether with `ETag` request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\"mid-air collisions\").\nThe format is always an `version_uid` identifier enclosed by double quotes.\nThe operation will be performed only if the existing latest `version_uid` of the resource (i.e. the `preceding_version_uid`) matches this header's value.\n",
										"key": "If-Match",
										"value": "<string>"
									},
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"description": "The (semicolon-separated) list of all ITEM_TAG to be set or updated and associated with the given VERSION or VERSIONED_OBJECT.\n",
										"key": "openehr-item-tag",
										"value": "[object Object],[object Object]"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"archetype_node_id\": \"anim exercitation\",\n  \"category\": {},\n  \"composer\": {},\n  \"content\": [],\n  \"context\": {},\n  \"language\": {},\n  \"name\": {},\n  \"territory\": {},\n  \"_type\": \"<string>\",\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/composition/:uid_based_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"composition",
										":uid_based_id"
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "uid_based_id"
										}
									]
								}
							},
							"status": "Precondition Failed",
							"code": 412,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "ETag",
									"value": ""
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "Location",
									"value": ""
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "1e470a76-6a3f-49fa-ace6-29aeeef6e140",
							"name": "`422 Unprocessable Entity` is returned when the content type and syntax is correct, could be converted to a resource, but there are semantic validation errors, such as the underlying template is not known or is not validating the supplied resource.\n",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "(Required) Header to make the request conditional. \nTogether with `ETag` request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\"mid-air collisions\").\nThe format is always an `version_uid` identifier enclosed by double quotes.\nThe operation will be performed only if the existing latest `version_uid` of the resource (i.e. the `preceding_version_uid`) matches this header's value.\n",
										"key": "If-Match",
										"value": "<string>"
									},
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"description": "The (semicolon-separated) list of all ITEM_TAG to be set or updated and associated with the given VERSION or VERSIONED_OBJECT.\n",
										"key": "openehr-item-tag",
										"value": "[object Object],[object Object]"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"archetype_node_id\": \"anim exercitation\",\n  \"category\": {},\n  \"composer\": {},\n  \"content\": [],\n  \"context\": {},\n  \"language\": {},\n  \"name\": {},\n  \"territory\": {},\n  \"_type\": \"<string>\",\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/composition/:uid_based_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"composition",
										":uid_based_id"
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "uid_based_id"
										}
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Delete COMPOSITION",
					"id": "05f65a1c-55b3-4721-a232-98322c384cd4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ehr/:ehr_id/composition/:uid_based_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ehr",
								":ehr_id",
								"composition",
								":uid_based_id"
							],
							"variable": [
								{
									"id": "d9228bfb-47d5-4844-8153-d4ea22f8cedf",
									"key": "ehr_id",
									"value": "<uuid>",
									"description": "(Required) EHR identifier taken from EHR.ehr_id.value.\n"
								},
								{
									"id": "61230873-4927-4cb0-a652-ac7bd64ce1b7",
									"key": "uid_based_id",
									"value": "<string>",
									"description": "(Required) An identifier in a form of an OBJECT_VERSION_ID identifier taken from VERSION.uid.value (i.e. a `version_uid`).\n"
								}
							]
						},
						"description": "Deletes the COMPOSITION identified by `uid_based_id` and associated with the EHR identified by `ehr_id`.\n\nThe `uid_based_id` MUST be in a form of an OBJECT_VERSION_ID identifier taken from the last (most recent) VERSION.uid.value, representing the `preceding_version_uid` to be deleted.\n"
					},
					"response": [
						{
							"id": "c9e70bf4-29bb-4152-964f-6c29e0e96c47",
							"name": "`204 No Content` is returned when COMPOSITION was deleted.\n",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/composition/:uid_based_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"composition",
										":uid_based_id"
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "uid_based_id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "ETag",
									"value": ""
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "Location",
									"value": ""
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "a1d12b8f-1535-4816-bd01-80a73a07976b",
							"name": "`400 Bad Request` is returned when the request could not be parsed or is invalid (e.g. malformed request URL syntax, missing required header or parameter, or syntactically invalid header, parameter or content) or when the resource identified by the reques",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/composition/:uid_based_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"composition",
										":uid_based_id"
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "uid_based_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "05e2a1e6-3d39-4c6c-8429-0daf4b4d1172",
							"name": "`404 Not Found` is returned when an EHR with `ehr_id` does not exist, or when the `uid_based_id` does not exist.\n",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/composition/:uid_based_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"composition",
										":uid_based_id"
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "uid_based_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "38b5ed6a-d1af-4695-b450-caa9f9a07a57",
							"name": "`409 Conflict` is returned when supplied `uid_based_id` doesn't match the latest version.\nReturns also latest version in the `Location` and `ETag` headers.\n",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/composition/:uid_based_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"composition",
										":uid_based_id"
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "uid_based_id"
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "ETag",
									"value": ""
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "Location",
									"value": ""
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Get versioned COMPOSITION",
					"id": "883b2d1e-64cb-4455-a653-e3c31ea4747e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/ehr/:ehr_id/versioned_composition/:versioned_object_uid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ehr",
								":ehr_id",
								"versioned_composition",
								":versioned_object_uid"
							],
							"variable": [
								{
									"id": "64343cd5-2a89-4faf-af76-684c8e48697f",
									"key": "ehr_id",
									"value": "<uuid>",
									"description": "(Required) EHR identifier taken from EHR.ehr_id.value.\n"
								},
								{
									"id": "bff50ca5-b55e-49b2-ba54-12bd5f5cd8a6",
									"key": "versioned_object_uid",
									"value": "<uuid>",
									"description": "(Required) VERSIONED_COMPOSITION identifier taken from VERSIONED_COMPOSITION.uid.value.\n"
								}
							]
						},
						"description": "Retrieves a VERSIONED_COMPOSITION identified by `versioned_object_uid` and associated with the EHR identified by `ehr_id`.\n"
					},
					"response": [
						{
							"id": "d71a45f7-2004-4960-b75c-6f5b6a72d496",
							"name": "`200 OK` is returned when the requested VERSIONED_COMPOSITION is successfully retrieved.\n",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/versioned_composition/:versioned_object_uid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"versioned_composition",
										":versioned_object_uid"
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "versioned_object_uid"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"uid\": {\n    \"value\": \"<string>\",\n    \"_type\": \"<string>\"\n  },\n  \"owner_id\": {\n    \"namespace\": \"<string>\",\n    \"type\": \"<string>\",\n    \"id\": {\n      \"value\": \"<string>\",\n      \"_type\": \"<string>\"\n    }\n  },\n  \"time_created\": {\n    \"value\": \"1989-12-21T09:37:35.956Z\",\n    \"_type\": \"DV_TEMPORAL\",\n    \"accuracy\": {},\n    \"magnitude_status\": \"=\",\n    \"normal_status\": {},\n    \"normal_range\": {}\n  },\n  \"_type\": \"<string>\"\n}"
						},
						{
							"id": "8a480162-a204-45c1-95e0-91a609f40f1f",
							"name": "`404 Not Found` is returned when an EHR with `ehr_id` does not exist, or when the `versioned_object_uid` does not exist.\n",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/versioned_composition/:versioned_object_uid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"versioned_composition",
										":versioned_object_uid"
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "versioned_object_uid"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Get versioned COMPOSITION revision history",
					"id": "91d709b1-0cf0-446d-bf49-d490c05ca5dd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/ehr/:ehr_id/versioned_composition/:versioned_object_uid/revision_history",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ehr",
								":ehr_id",
								"versioned_composition",
								":versioned_object_uid",
								"revision_history"
							],
							"variable": [
								{
									"id": "cb28a2ba-a7f6-405f-8fb9-9734c21012ab",
									"key": "ehr_id",
									"value": "<uuid>",
									"description": "(Required) EHR identifier taken from EHR.ehr_id.value.\n"
								},
								{
									"id": "d053a720-c8ea-4077-b40b-965f35fe0da8",
									"key": "versioned_object_uid",
									"value": "<uuid>",
									"description": "(Required) VERSIONED_COMPOSITION identifier taken from VERSIONED_COMPOSITION.uid.value.\n"
								}
							]
						},
						"description": "Retrieves revision history of the VERSIONED_COMPOSITION identified by `versioned_object_uid` and associated with the EHR identified by `ehr_id`.\n"
					},
					"response": [
						{
							"id": "9d9455c8-d5df-47d5-92c7-a2e5af3f3ef2",
							"name": "`200 OK` is returned when the requested REVISION_HISTORY is successfully retrieved.\n",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/versioned_composition/:versioned_object_uid/revision_history",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"versioned_composition",
										":versioned_object_uid",
										"revision_history"
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "versioned_object_uid"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"items\": [\n    {\n      \"version_id\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      },\n      \"audits\": [\n        {\n          \"system_id\": \"<string>\",\n          \"time_committed\": {\n            \"value\": \"1978-11-09T08:30:51.076Z\",\n            \"_type\": \"DV_TEMPORAL\",\n            \"accuracy\": {},\n            \"magnitude_status\": \"=\",\n            \"normal_status\": {},\n            \"normal_range\": {}\n          },\n          \"change_type\": {\n            \"defining_code\": {},\n            \"value\": \"Ut in magna\",\n            \"_type\": \"DV_TEXT\",\n            \"hyperlink\": {},\n            \"formatting\": \"deserunt Exce\",\n            \"language\": {},\n            \"encoding\": {}\n          },\n          \"committer\": {\n            \"_type\": \"<string>\",\n            \"external_ref\": {\n              \"namespace\": \"<string>\",\n              \"type\": \"<string>\",\n              \"id\": {\n                \"value\": \"<string>\",\n                \"_type\": \"<string>\"\n              }\n            }\n          },\n          \"_type\": \"AUDIT_DETAILS\",\n          \"description\": {\n            \"value\": \"dolor\",\n            \"_type\": \"DV_TEXT\",\n            \"hyperlink\": {},\n            \"formatting\": \"officia eu commodo aliquip\",\n            \"language\": {},\n            \"encoding\": {}\n          }\n        },\n        {\n          \"system_id\": \"<string>\",\n          \"time_committed\": {\n            \"value\": \"1961-01-29T14:04:44.412Z\",\n            \"_type\": \"DV_TEMPORAL\",\n            \"accuracy\": {},\n            \"magnitude_status\": \"=\",\n            \"normal_status\": {},\n            \"normal_range\": {}\n          },\n          \"change_type\": {\n            \"defining_code\": {},\n            \"value\": \"occaecat cupidatat nulla\",\n            \"_type\": \"DV_TEXT\",\n            \"hyperlink\": {},\n            \"formatting\": \"officia Duis ea\",\n            \"language\": {},\n            \"encoding\": {}\n          },\n          \"committer\": {\n            \"_type\": \"<string>\",\n            \"external_ref\": {\n              \"namespace\": \"<string>\",\n              \"type\": \"<string>\",\n              \"id\": {\n                \"value\": \"<string>\",\n                \"_type\": \"<string>\"\n              }\n            }\n          },\n          \"_type\": \"AUDIT_DETAILS\",\n          \"description\": {\n            \"value\": \"eiusmod ipsum\",\n            \"_type\": \"DV_TEXT\",\n            \"hyperlink\": {},\n            \"formatting\": \"exercitation deserunt non proident\",\n            \"language\": {},\n            \"encoding\": {}\n          }\n        }\n      ]\n    },\n    {\n      \"version_id\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      },\n      \"audits\": [\n        {\n          \"system_id\": \"<string>\",\n          \"time_committed\": {\n            \"value\": \"1998-12-24T03:13:42.656Z\",\n            \"_type\": \"DV_TEMPORAL\",\n            \"accuracy\": {},\n            \"magnitude_status\": \"=\",\n            \"normal_status\": {},\n            \"normal_range\": {}\n          },\n          \"change_type\": {\n            \"defining_code\": {},\n            \"value\": \"sint veniam et\",\n            \"_type\": \"DV_TEXT\",\n            \"hyperlink\": {},\n            \"formatting\": \"sint dolore\",\n            \"language\": {},\n            \"encoding\": {}\n          },\n          \"committer\": {\n            \"_type\": \"<string>\",\n            \"external_ref\": {\n              \"namespace\": \"<string>\",\n              \"type\": \"<string>\",\n              \"id\": {\n                \"value\": \"<string>\",\n                \"_type\": \"<string>\"\n              }\n            }\n          },\n          \"_type\": \"AUDIT_DETAILS\",\n          \"description\": {\n            \"value\": \"Ut sunt nostrud\",\n            \"_type\": \"DV_TEXT\",\n            \"hyperlink\": {},\n            \"formatting\": \"sed aliquip tempor\",\n            \"language\": {},\n            \"encoding\": {}\n          }\n        },\n        {\n          \"system_id\": \"<string>\",\n          \"time_committed\": {\n            \"value\": \"1967-11-14T02:30:30.949Z\",\n            \"_type\": \"DV_TEMPORAL\",\n            \"accuracy\": {},\n            \"magnitude_status\": \"=\",\n            \"normal_status\": {},\n            \"normal_range\": {}\n          },\n          \"change_type\": {\n            \"defining_code\": {},\n            \"value\": \"laboris consectetur\",\n            \"_type\": \"DV_TEXT\",\n            \"hyperlink\": {},\n            \"formatting\": \"anim nostrud aliqua magna voluptate\",\n            \"language\": {},\n            \"encoding\": {}\n          },\n          \"committer\": {\n            \"_type\": \"<string>\",\n            \"external_ref\": {\n              \"namespace\": \"<string>\",\n              \"type\": \"<string>\",\n              \"id\": {\n                \"value\": \"<string>\",\n                \"_type\": \"<string>\"\n              }\n            }\n          },\n          \"_type\": \"AUDIT_DETAILS\",\n          \"description\": {\n            \"value\": \"aliqua fugiat eu enim\",\n            \"_type\": \"DV_TEXT\",\n            \"hyperlink\": {},\n            \"formatting\": \"mollit officia consequat aliquip\",\n            \"language\": {},\n            \"encoding\": {}\n          }\n        }\n      ]\n    }\n  ]\n}"
						},
						{
							"id": "ee521cd3-cfc7-4741-826e-f234f419510e",
							"name": "`404 Not Found` is returned when an EHR with `ehr_id` does not exist, or when the `versioned_object_uid` does not exist.\n",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/versioned_composition/:versioned_object_uid/revision_history",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"versioned_composition",
										":versioned_object_uid",
										"revision_history"
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "versioned_object_uid"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Get versioned COMPOSITION version at time",
					"id": "1401aaa2-f643-450f-80e9-00ba609cb028",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/ehr/:ehr_id/versioned_composition/:versioned_object_uid/version?version_at_time=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ehr",
								":ehr_id",
								"versioned_composition",
								":versioned_object_uid",
								"version"
							],
							"query": [
								{
									"description": "A given time in the extended ISO 8601 format.\n",
									"key": "version_at_time",
									"value": "<string>"
								}
							],
							"variable": [
								{
									"id": "2470f419-4558-41d3-afca-2afc9f860b18",
									"key": "ehr_id",
									"value": "<uuid>",
									"description": "(Required) EHR identifier taken from EHR.ehr_id.value.\n"
								},
								{
									"id": "58122cc2-e626-41ed-a5ad-92bb7fe4a3b5",
									"key": "versioned_object_uid",
									"value": "<uuid>",
									"description": "(Required) VERSIONED_COMPOSITION identifier taken from VERSIONED_COMPOSITION.uid.value.\n"
								}
							]
						},
						"description": "Retrieves a VERSION from the VERSIONED_COMPOSITION identified by `versioned_object_uid` and associated with the EHR identified by `ehr_id`.\n\nIf `version_at_time` is supplied, retrieves the VERSION extant _at specified time_, otherwise retrieves the _latest_ VERSION.\n"
					},
					"response": [
						{
							"id": "d40f6a1a-2605-4b5f-ad6f-ac5df89e0ee9",
							"name": "`200 OK` is returned when the requested VERSION is successfully retrieved.\n",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/versioned_composition/:versioned_object_uid/version?version_at_time=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"versioned_composition",
										":versioned_object_uid",
										"version"
									],
									"query": [
										{
											"description": "A given time in the extended ISO 8601 format.\n",
											"key": "version_at_time",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "versioned_object_uid"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "ETag",
									"value": ""
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "Location",
									"value": ""
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"contribution\": {\n    \"namespace\": \"<string>\",\n    \"type\": \"<string>\",\n    \"id\": {\n      \"value\": \"<string>\",\n      \"_type\": \"<string>\"\n    }\n  },\n  \"commit_audit\": {\n    \"system_id\": \"<string>\",\n    \"time_committed\": {\n      \"value\": \"1954-02-14T06:58:59.779Z\",\n      \"_type\": \"DV_TEMPORAL\",\n      \"accuracy\": {},\n      \"magnitude_status\": \"=\",\n      \"normal_status\": {},\n      \"normal_range\": {}\n    },\n    \"change_type\": {\n      \"defining_code\": {},\n      \"value\": \"in ea laborum in\",\n      \"_type\": \"DV_TEXT\",\n      \"hyperlink\": {},\n      \"formatting\": \"id\",\n      \"language\": {},\n      \"encoding\": {}\n    },\n    \"committer\": {\n      \"_type\": \"<string>\",\n      \"external_ref\": {\n        \"namespace\": \"<string>\",\n        \"type\": \"<string>\",\n        \"id\": {\n          \"value\": \"<string>\",\n          \"_type\": \"<string>\"\n        }\n      }\n    },\n    \"_type\": \"AUDIT_DETAILS\",\n    \"description\": {\n      \"value\": \"irure\",\n      \"_type\": \"DV_TEXT\",\n      \"hyperlink\": {},\n      \"formatting\": \"consecte\",\n      \"language\": {},\n      \"encoding\": {}\n    }\n  },\n  \"data\": {\n    \"archetype_node_id\": \"eu Lorem nulla mollit\",\n    \"category\": {},\n    \"composer\": {},\n    \"context\": {},\n    \"language\": {},\n    \"name\": {},\n    \"territory\": {},\n    \"_type\": \"<string>\",\n    \"uid\": {},\n    \"archetype_details\": {},\n    \"feeder_audit\": {}\n  },\n  \"_type\": \"<string>\",\n  \"signature\": \"<string>\"\n}"
						},
						{
							"id": "fc28ad48-98c3-4eb9-973b-23ee4ea33564",
							"name": "`404 Not Found` is returned when an EHR with `ehr_id` does not exist, or when `versioned_object_uid` does not exist, or when a version of the resource does not exist at the specified `version_at_time`.\n",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/versioned_composition/:versioned_object_uid/version?version_at_time=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"versioned_composition",
										":versioned_object_uid",
										"version"
									],
									"query": [
										{
											"description": "A given time in the extended ISO 8601 format.\n",
											"key": "version_at_time",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "versioned_object_uid"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Get versioned COMPOSITION version by id",
					"id": "9026b035-844a-4d13-8fe0-8cf93e6e1f5c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/ehr/:ehr_id/versioned_composition/:versioned_object_uid/version/:version_uid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ehr",
								":ehr_id",
								"versioned_composition",
								":versioned_object_uid",
								"version",
								":version_uid"
							],
							"variable": [
								{
									"id": "53bbfe36-f6dd-464b-8226-20d668893e72",
									"key": "ehr_id",
									"value": "<uuid>",
									"description": "(Required) EHR identifier taken from EHR.ehr_id.value.\n"
								},
								{
									"id": "3927a163-28ad-4bdd-b899-1df2365833d1",
									"key": "versioned_object_uid",
									"value": "<uuid>",
									"description": "(Required) VERSIONED_COMPOSITION identifier taken from VERSIONED_COMPOSITION.uid.value.\n"
								},
								{
									"id": "6bb08384-f781-4b7a-aec6-97d7ab60bcde",
									"key": "version_uid",
									"value": "<string>",
									"description": "(Required) VERSION identifier taken from VERSION.uid.value.\n"
								}
							]
						},
						"description": "Retrieves a VERSION identified by `version_uid` of a VERSIONED_COMPOSITION identified by `versioned_object_uid` and associated with the EHR identified by `ehr_id`.\n"
					},
					"response": [
						{
							"id": "67406599-0361-42c7-967b-542f00319d49",
							"name": "`200 OK` is returned when the requested VERSION is successfully retrieved.\n",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/versioned_composition/:versioned_object_uid/version/:version_uid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"versioned_composition",
										":versioned_object_uid",
										"version",
										":version_uid"
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "versioned_object_uid"
										},
										{
											"key": "version_uid"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"contribution\": {\n    \"namespace\": \"<string>\",\n    \"type\": \"<string>\",\n    \"id\": {\n      \"value\": \"<string>\",\n      \"_type\": \"<string>\"\n    }\n  },\n  \"commit_audit\": {\n    \"system_id\": \"<string>\",\n    \"time_committed\": {\n      \"value\": \"1954-02-14T06:58:59.779Z\",\n      \"_type\": \"DV_TEMPORAL\",\n      \"accuracy\": {},\n      \"magnitude_status\": \"=\",\n      \"normal_status\": {},\n      \"normal_range\": {}\n    },\n    \"change_type\": {\n      \"defining_code\": {},\n      \"value\": \"in ea laborum in\",\n      \"_type\": \"DV_TEXT\",\n      \"hyperlink\": {},\n      \"formatting\": \"id\",\n      \"language\": {},\n      \"encoding\": {}\n    },\n    \"committer\": {\n      \"_type\": \"<string>\",\n      \"external_ref\": {\n        \"namespace\": \"<string>\",\n        \"type\": \"<string>\",\n        \"id\": {\n          \"value\": \"<string>\",\n          \"_type\": \"<string>\"\n        }\n      }\n    },\n    \"_type\": \"AUDIT_DETAILS\",\n    \"description\": {\n      \"value\": \"irure\",\n      \"_type\": \"DV_TEXT\",\n      \"hyperlink\": {},\n      \"formatting\": \"consecte\",\n      \"language\": {},\n      \"encoding\": {}\n    }\n  },\n  \"data\": {\n    \"archetype_node_id\": \"eu Lorem nulla mollit\",\n    \"category\": {},\n    \"composer\": {},\n    \"context\": {},\n    \"language\": {},\n    \"name\": {},\n    \"territory\": {},\n    \"_type\": \"<string>\",\n    \"uid\": {},\n    \"archetype_details\": {},\n    \"feeder_audit\": {}\n  },\n  \"_type\": \"<string>\",\n  \"signature\": \"<string>\"\n}"
						},
						{
							"id": "d02a1590-1556-4d4d-bf7a-ff6e0ccd11f4",
							"name": "`404 Not Found` is returned when an EHR with `ehr_id` does not exist, or when `versioned_object_uid` does not exist, or when a VERSION with `version_uid` does not exist.\n",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/versioned_composition/:versioned_object_uid/version/:version_uid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"versioned_composition",
										":versioned_object_uid",
										"version",
										":version_uid"
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "versioned_object_uid"
										},
										{
											"key": "version_uid"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				}
			],
			"id": "8550cc78-74cc-48d2-9349-ebaddf731458",
			"description": "Management of [COMPOSITION](https://specifications.openehr.org/releases/RM/latest/ehr.html#_composition_class) and [VERSIONED_COMPOSITION](https://specifications.openehr.org/releases/RM/latest/ehr.html#_versioned_composition_class) resources.\nActions upon resources of this group are also formally described in the [I_EHR_COMPOSITION](https://specifications.openehr.org/releases/SM/development/openehr_platform.html#_i_ehr_composition_interface) Abstract Service Model interface.\n"
		},
		{
			"name": "DIRECTORY",
			"item": [
				{
					"name": "Create directory",
					"id": "1880426d-d4dd-4a42-ae37-8878b26d443e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
								"key": "Prefer",
								"value": "return=minimal"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": {},\n  \"archetype_node_id\": \"ad anim Lorem\",\n  \"_type\": \"<string>\",\n  \"details\": {},\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ehr/:ehr_id/directory",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ehr",
								":ehr_id",
								"directory"
							],
							"variable": [
								{
									"id": "e006bd77-050b-4ec9-a81f-04aa8a341af7",
									"key": "ehr_id",
									"value": "<uuid>",
									"description": "(Required) EHR identifier taken from EHR.ehr_id.value.\n"
								}
							]
						},
						"description": "Creates a new directory FOLDER associated with the EHR identified by `ehr_id`.\n"
					},
					"response": [
						{
							"id": "4729198e-2b39-4202-b424-46dae972b360",
							"name": "`201 Created` is returned when the FOLDER was created. \nContent body is only returned when `Prefer` header has `return=representation`, otherwise only headers are returned.\n",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": {},\n  \"archetype_node_id\": \"ad anim Lorem\",\n  \"_type\": \"<string>\",\n  \"details\": {},\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/directory",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"directory"
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "ETag",
									"value": ""
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "Location",
									"value": ""
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"name\": {},\n  \"archetype_node_id\": \"ad anim Lorem\",\n  \"_type\": \"<string>\",\n  \"details\": {},\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}"
						},
						{
							"id": "8c433320-9726-4d75-96db-996d3807f93f",
							"name": "`400 Bad Request` is returned when the request could not be parsed or is invalid (e.g. malformed request URL syntax, missing required header or parameter, or syntactically invalid header, parameter or content). \nThe response body MAY contain error details",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": {},\n  \"archetype_node_id\": \"ad anim Lorem\",\n  \"_type\": \"<string>\",\n  \"details\": {},\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/directory",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"directory"
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"message\": \"<string>\",\n  \"validationErrors\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}"
						},
						{
							"id": "c8cbffef-cda9-4ea1-82ee-115abdcf4261",
							"name": "`404 Not Found` is returned when an EHR with `ehr_id` does not exist.\n",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": {},\n  \"archetype_node_id\": \"ad anim Lorem\",\n  \"_type\": \"<string>\",\n  \"details\": {},\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/directory",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"directory"
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Update directory",
					"id": "d13eeeb9-74c0-47e0-9877-01eb932748ce",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"description": "(Required) Header to make the request conditional. \nTogether with `ETag` request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\"mid-air collisions\").\nThe format is always an `version_uid` identifier enclosed by double quotes.\nThe operation will be performed only if the existing latest `version_uid` of the resource (i.e. the `preceding_version_uid`) matches this header's value.\n",
								"key": "If-Match",
								"value": "<string>"
							},
							{
								"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
								"key": "Prefer",
								"value": "return=minimal"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": {},\n  \"archetype_node_id\": \"ad anim Lorem\",\n  \"_type\": \"<string>\",\n  \"details\": {},\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ehr/:ehr_id/directory",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ehr",
								":ehr_id",
								"directory"
							],
							"variable": [
								{
									"id": "db87edb6-2c76-462f-98b8-cf072034bb52",
									"key": "ehr_id",
									"value": "<uuid>",
									"description": "(Required) EHR identifier taken from EHR.ehr_id.value.\n"
								}
							]
						},
						"description": "Updates directory FOLDER associated with the EHR identified by `ehr_id`.\n\nThe existing latest `version_uid` of directory FOLDER resource (i.e. the `preceding_version_uid`) must be specified in the `If-Match` header.\n"
					},
					"response": [
						{
							"id": "e12daa70-e1cb-45a1-88fc-ac9121adc871",
							"name": "`200 OK` is returned when directory was successfully updated and the updated resource is returned in the body when `Prefer` header value is `return=representation`.\n",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "(Required) Header to make the request conditional. \nTogether with `ETag` request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\"mid-air collisions\").\nThe format is always an `version_uid` identifier enclosed by double quotes.\nThe operation will be performed only if the existing latest `version_uid` of the resource (i.e. the `preceding_version_uid`) matches this header's value.\n",
										"key": "If-Match",
										"value": "<string>"
									},
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": {},\n  \"archetype_node_id\": \"ad anim Lorem\",\n  \"_type\": \"<string>\",\n  \"details\": {},\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/directory",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"directory"
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "ETag",
									"value": ""
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "Location",
									"value": ""
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"name\": {},\n  \"archetype_node_id\": \"ad anim Lorem\",\n  \"_type\": \"<string>\",\n  \"details\": {},\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}"
						},
						{
							"id": "13d32963-b0ee-4143-a551-f004e52ee425",
							"name": "`204 No Content` is returned when directory was updated and `Prefer` header is missing or is set to `return=minimal`.\n",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "(Required) Header to make the request conditional. \nTogether with `ETag` request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\"mid-air collisions\").\nThe format is always an `version_uid` identifier enclosed by double quotes.\nThe operation will be performed only if the existing latest `version_uid` of the resource (i.e. the `preceding_version_uid`) matches this header's value.\n",
										"key": "If-Match",
										"value": "<string>"
									},
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": {},\n  \"archetype_node_id\": \"ad anim Lorem\",\n  \"_type\": \"<string>\",\n  \"details\": {},\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/directory",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"directory"
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "ETag",
									"value": ""
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "Location",
									"value": ""
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "036d5489-44bb-4b79-a01d-c8185920e614",
							"name": "`400 Bad Request` is returned when the request could not be parsed or is invalid (e.g. malformed request URL syntax, missing required header or parameter, or syntactically invalid header, parameter or content). \nThe response body MAY contain error details",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "(Required) Header to make the request conditional. \nTogether with `ETag` request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\"mid-air collisions\").\nThe format is always an `version_uid` identifier enclosed by double quotes.\nThe operation will be performed only if the existing latest `version_uid` of the resource (i.e. the `preceding_version_uid`) matches this header's value.\n",
										"key": "If-Match",
										"value": "<string>"
									},
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": {},\n  \"archetype_node_id\": \"ad anim Lorem\",\n  \"_type\": \"<string>\",\n  \"details\": {},\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/directory",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"directory"
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"message\": \"<string>\",\n  \"validationErrors\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}"
						},
						{
							"id": "6046b065-fe8d-46e0-8ba8-a4a3cb8f3d13",
							"name": "`404 Not Found` is returned when an EHR with `ehr_id` does not exist.\n",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "(Required) Header to make the request conditional. \nTogether with `ETag` request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\"mid-air collisions\").\nThe format is always an `version_uid` identifier enclosed by double quotes.\nThe operation will be performed only if the existing latest `version_uid` of the resource (i.e. the `preceding_version_uid`) matches this header's value.\n",
										"key": "If-Match",
										"value": "<string>"
									},
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": {},\n  \"archetype_node_id\": \"ad anim Lorem\",\n  \"_type\": \"<string>\",\n  \"details\": {},\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/directory",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"directory"
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "5ad28aa6-f82c-4778-928c-5197572bed77",
							"name": "`412 Precondition Failed` is returned when `If-Match` request header doesn't match the latest version on the service side.\nReturns also latest `version_uid` in the `Location` and `ETag` headers.\n",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "(Required) Header to make the request conditional. \nTogether with `ETag` request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\"mid-air collisions\").\nThe format is always an `version_uid` identifier enclosed by double quotes.\nThe operation will be performed only if the existing latest `version_uid` of the resource (i.e. the `preceding_version_uid`) matches this header's value.\n",
										"key": "If-Match",
										"value": "<string>"
									},
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": {},\n  \"archetype_node_id\": \"ad anim Lorem\",\n  \"_type\": \"<string>\",\n  \"details\": {},\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/directory",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"directory"
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "Precondition Failed",
							"code": 412,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "ETag",
									"value": ""
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "Location",
									"value": ""
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Delete directory",
					"id": "9400f74a-b453-4104-910f-bde04e7e3f1e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"description": "(Required) Header to make the request conditional. \nTogether with `ETag` request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\"mid-air collisions\").\nThe format is always an `version_uid` identifier enclosed by double quotes.\nThe operation will be performed only if the existing latest `version_uid` of the resource (i.e. the `preceding_version_uid`) matches this header's value.\n",
								"key": "If-Match",
								"value": "<string>"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/ehr/:ehr_id/directory",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ehr",
								":ehr_id",
								"directory"
							],
							"variable": [
								{
									"id": "ab98c657-56e5-4f6d-9010-196a7ebf9f8a",
									"key": "ehr_id",
									"value": "<uuid>",
									"description": "(Required) EHR identifier taken from EHR.ehr_id.value.\n"
								}
							]
						},
						"description": "Deletes directory FOLDER associated with the EHR identified by `ehr_id`.\n\nThe existing latest `version_uid` of directory FOLDER resource (i.e. the `preceding_version_uid`) must be specified in the `If-Match` header.\n"
					},
					"response": [
						{
							"id": "97fded49-e4aa-44ee-aa5c-592a6f38c3bd",
							"name": "`204 No Content` is returned when the resource identified by the request parameters has been (logically) deleted.\n",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "(Required) Header to make the request conditional. \nTogether with `ETag` request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\"mid-air collisions\").\nThe format is always an `version_uid` identifier enclosed by double quotes.\nThe operation will be performed only if the existing latest `version_uid` of the resource (i.e. the `preceding_version_uid`) matches this header's value.\n",
										"key": "If-Match",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/directory",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"directory"
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "51ebd724-dab6-4040-82b8-40f8dc6bbd51",
							"name": "`400 Bad Request` is returned when the request could not be parsed or is invalid (e.g. malformed request URL syntax, missing required header or parameter, or syntactically invalid header, parameter or content). \nThe response body MAY contain error details",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "(Required) Header to make the request conditional. \nTogether with `ETag` request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\"mid-air collisions\").\nThe format is always an `version_uid` identifier enclosed by double quotes.\nThe operation will be performed only if the existing latest `version_uid` of the resource (i.e. the `preceding_version_uid`) matches this header's value.\n",
										"key": "If-Match",
										"value": "<string>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/directory",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"directory"
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"message\": \"<string>\",\n  \"validationErrors\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}"
						},
						{
							"id": "b4999924-4c21-4d05-afdf-64633b9fc652",
							"name": "`404 Not Found` is returned when an EHR with `ehr_id` does not exist.\n",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "(Required) Header to make the request conditional. \nTogether with `ETag` request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\"mid-air collisions\").\nThe format is always an `version_uid` identifier enclosed by double quotes.\nThe operation will be performed only if the existing latest `version_uid` of the resource (i.e. the `preceding_version_uid`) matches this header's value.\n",
										"key": "If-Match",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/directory",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"directory"
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "054d1e3e-2ed6-462e-807f-2ba0b74d2313",
							"name": "`412 Precondition Failed` is returned when `If-Match` request header doesn't match the latest version on the service side.\nReturns also latest `version_uid` in the `Location` and `ETag` headers.\n",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "(Required) Header to make the request conditional. \nTogether with `ETag` request tag, it helps to prevent simultaneous updates of a resource from overwriting each other (\"mid-air collisions\").\nThe format is always an `version_uid` identifier enclosed by double quotes.\nThe operation will be performed only if the existing latest `version_uid` of the resource (i.e. the `preceding_version_uid`) matches this header's value.\n",
										"key": "If-Match",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/directory",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"directory"
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "Precondition Failed",
							"code": 412,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "ETag",
									"value": ""
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "Location",
									"value": ""
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Get folder in directory version at time",
					"id": "15f3c218-9142-4978-a1f6-0749a651bb20",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/ehr/:ehr_id/directory?version_at_time=<string>&path=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ehr",
								":ehr_id",
								"directory"
							],
							"query": [
								{
									"description": "A given time in the extended ISO 8601 format.\n",
									"key": "version_at_time",
									"value": "<string>"
								},
								{
									"description": "A path to a sub-folder; consists of slash-separated values of the name attribute of FOLDERs in the directory.\n",
									"key": "path",
									"value": "<string>"
								}
							],
							"variable": [
								{
									"id": "ab8107c7-420a-4a3a-bd0c-57d5e5e36b8a",
									"key": "ehr_id",
									"value": "<uuid>",
									"description": "(Required) EHR identifier taken from EHR.ehr_id.value.\n"
								}
							]
						},
						"description": "Retrieves the version of the directory FOLDER associated with the EHR identified by `ehr_id`. \nIf `version_at_time` is supplied, retrieves the version extant _at specified time_, otherwise retrieves the _latest_ directory FOLDER version. \n\nIf `path` is supplied, retrieves from the directory only the sub-FOLDER that is associated with that path.\n"
					},
					"response": [
						{
							"id": "893b66c7-4bce-4960-935c-7c824c7a575d",
							"name": "`200 OK` is returned when the FOLDER is successfully retrieved.\n",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/directory?version_at_time=<string>&path=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"directory"
									],
									"query": [
										{
											"description": "A given time in the extended ISO 8601 format.\n",
											"key": "version_at_time",
											"value": "<string>"
										},
										{
											"description": "A path to a sub-folder; consists of slash-separated values of the name attribute of FOLDERs in the directory.\n",
											"key": "path",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"name\": {},\n  \"archetype_node_id\": \"ad anim Lorem\",\n  \"_type\": \"<string>\",\n  \"details\": {},\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}"
						},
						{
							"id": "ff97b598-3918-415d-942c-57cfa0bfaa94",
							"name": "`204 No Content` is returned when the resource identified by the request parameters (at specified `version_at_time`) time has been deleted.\n",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/directory?version_at_time=<string>&path=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"directory"
									],
									"query": [
										{
											"description": "A given time in the extended ISO 8601 format.\n",
											"key": "version_at_time",
											"value": "<string>"
										},
										{
											"description": "A path to a sub-folder; consists of slash-separated values of the name attribute of FOLDERs in the directory.\n",
											"key": "path",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "0c9e0b9e-a8ac-4933-adfa-4bcfa5c00765",
							"name": "`404 Not Found` is returned when an EHR with `ehr_id` does not exist, or when a directory does not exist at the specified `version_at_time`, or when `path` does not exists within the directory.\n",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/directory?version_at_time=<string>&path=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"directory"
									],
									"query": [
										{
											"description": "A given time in the extended ISO 8601 format.\n",
											"key": "version_at_time",
											"value": "<string>"
										},
										{
											"description": "A path to a sub-folder; consists of slash-separated values of the name attribute of FOLDERs in the directory.\n",
											"key": "path",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Get folder in directory version",
					"id": "692fc6e2-779c-4ba7-8cdf-339e525db515",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/ehr/:ehr_id/directory/:version_uid?path=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ehr",
								":ehr_id",
								"directory",
								":version_uid"
							],
							"query": [
								{
									"description": "A path to a sub-folder; consists of slash-separated values of the name attribute of FOLDERs in the directory.\n",
									"key": "path",
									"value": "<string>"
								}
							],
							"variable": [
								{
									"id": "ed07e6ee-d6c1-4a7c-a987-3a58dcf27eff",
									"key": "ehr_id",
									"value": "<uuid>",
									"description": "(Required) EHR identifier taken from EHR.ehr_id.value.\n"
								},
								{
									"id": "ccc0e1a8-74d3-49cb-9185-eaf09cc3dab9",
									"key": "version_uid",
									"value": "<string>",
									"description": "(Required) VERSION identifier taken from VERSION.uid.value.\n"
								}
							]
						},
						"description": "Retrieves a particular version of the directory FOLDER identified by `version_uid` and associated with the EHR identified by `ehr_id`.\n\nIf `path` is supplied, retrieves from the directory only the sub-FOLDER that is associated with that path.\n"
					},
					"response": [
						{
							"id": "97120de3-75b7-4e16-8347-6b5ffd73421e",
							"name": "`200 OK` is returned when the FOLDER is successfully retrieved.\n",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/directory/:version_uid?path=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"directory",
										":version_uid"
									],
									"query": [
										{
											"description": "A path to a sub-folder; consists of slash-separated values of the name attribute of FOLDERs in the directory.\n",
											"key": "path",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "version_uid"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"name\": {},\n  \"archetype_node_id\": \"ad anim Lorem\",\n  \"_type\": \"<string>\",\n  \"details\": {},\n  \"uid\": {},\n  \"archetype_details\": {},\n  \"feeder_audit\": {}\n}"
						},
						{
							"id": "e0514dd3-78af-44b0-8f67-652815efc63a",
							"name": "`404 Not Found` is returned when an EHR with `ehr_id` does not exist, or when a directory with `version_uid` does not exist, or when `path` does not exist within the directory.\n",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/directory/:version_uid?path=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"directory",
										":version_uid"
									],
									"query": [
										{
											"description": "A path to a sub-folder; consists of slash-separated values of the name attribute of FOLDERs in the directory.\n",
											"key": "path",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "version_uid"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				}
			],
			"id": "e639a2dd-bb4c-42ed-be3d-42fee8a86e78",
			"description": "Management of the [directory](https://specifications.openehr.org/releases/RM/latest/ehr.html#_directory) [FOLDER](https://specifications.openehr.org/releases/RM/latest/common.html#_folder_class) resource.\nActions upon resources of this group are also formally described in the [I_EHR_DIRECTORY](https://specifications.openehr.org/releases/SM/development/openehr_platform.html#_i_ehr_directory_interface) Abstract Service Model interface.\n"
		},
		{
			"name": "CONTRIBUTION",
			"item": [
				{
					"name": "Create CONTRIBUTION",
					"id": "b01599ac-5e09-4322-80c9-db68268c71ea",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
								"key": "Prefer",
								"value": "return=minimal"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"versions\": [\n    {\n      \"lifecycle_state\": {\n        \"terminology_id\": \"<string>\",\n        \"code_string\": \"<string>\",\n        \"terminology_version\": \"<string>\",\n        \"uri\": \"<uri>\"\n      },\n      \"data\": {\n        \"name\": {},\n        \"archetype_node_id\": \"consequat dolore cillum anim\",\n        \"uid\": {},\n        \"archetype_details\": {},\n        \"feeder_audit\": {},\n        \"_type\": \"<string>\"\n      },\n      \"commit_audit\": {\n        \"change_type\": {\n          \"terminology_id\": \"<string>\",\n          \"code_string\": \"<string>\",\n          \"terminology_version\": \"<string>\",\n          \"uri\": \"<uri>\"\n        },\n        \"committer\": {\n          \"_type\": \"<string>\",\n          \"external_ref\": {\n            \"namespace\": \"<string>\",\n            \"type\": \"<string>\",\n            \"id\": {\n              \"value\": \"<string>\",\n              \"_type\": \"<string>\"\n            }\n          }\n        },\n        \"_type\": \"UPDATE_AUDIT\",\n        \"description\": {\n          \"value\": \"dolore\",\n          \"_type\": \"DV_TEXT\",\n          \"hyperlink\": {},\n          \"formatting\": \"Duis consequat in anim\",\n          \"language\": {},\n          \"encoding\": {}\n        }\n      },\n      \"preceding_version_uid\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      },\n      \"signature\": \"<string>\",\n      \"attestations\": [\n        {\n          \"change_type\": {\n            \"terminology_id\": \"<string>\",\n            \"code_string\": \"<string>\",\n            \"terminology_version\": \"<string>\",\n            \"uri\": \"<uri>\"\n          },\n          \"committer\": {\n            \"_type\": \"<string>\",\n            \"external_ref\": {\n              \"namespace\": \"<string>\",\n              \"type\": \"<string>\",\n              \"id\": {\n                \"value\": \"<string>\",\n                \"_type\": \"<string>\"\n              }\n            }\n          },\n          \"is_pending\": false,\n          \"reason\": {},\n          \"_type\": \"UPDATE_AUDIT\",\n          \"attested_view\": {},\n          \"proof\": \"do\",\n          \"description\": {\n            \"value\": \"reprehenderit magna\",\n            \"_type\": \"DV_TEXT\",\n            \"hyperlink\": {},\n            \"formatting\": \"exercitation nulla proident velit ut\",\n            \"language\": {},\n            \"encoding\": {}\n          }\n        },\n        {\n          \"change_type\": {\n            \"terminology_id\": \"<string>\",\n            \"code_string\": \"<string>\",\n            \"terminology_version\": \"<string>\",\n            \"uri\": \"<uri>\"\n          },\n          \"committer\": {\n            \"_type\": \"<string>\",\n            \"external_ref\": {\n              \"namespace\": \"<string>\",\n              \"type\": \"<string>\",\n              \"id\": {\n                \"value\": \"<string>\",\n                \"_type\": \"<string>\"\n              }\n            }\n          },\n          \"is_pending\": true,\n          \"reason\": {},\n          \"_type\": \"UPDATE_AUDIT\",\n          \"attested_view\": {},\n          \"proof\": \"nulla fugiat non\",\n          \"description\": {\n            \"value\": \"eu aute\",\n            \"_type\": \"DV_TEXT\",\n            \"hyperlink\": {},\n            \"formatting\": \"quis sed\",\n            \"language\": {},\n            \"encoding\": {}\n          }\n        }\n      ]\n    },\n    {\n      \"lifecycle_state\": {\n        \"terminology_id\": \"<string>\",\n        \"code_string\": \"<string>\",\n        \"terminology_version\": \"<string>\",\n        \"uri\": \"<uri>\"\n      },\n      \"data\": {\n        \"name\": {},\n        \"archetype_node_id\": \"officia nisi\",\n        \"uid\": {},\n        \"archetype_details\": {},\n        \"feeder_audit\": {},\n        \"_type\": \"<string>\"\n      },\n      \"commit_audit\": {\n        \"change_type\": {\n          \"terminology_id\": \"<string>\",\n          \"code_string\": \"<string>\",\n          \"terminology_version\": \"<string>\",\n          \"uri\": \"<uri>\"\n        },\n        \"committer\": {\n          \"_type\": \"<string>\",\n          \"external_ref\": {\n            \"namespace\": \"<string>\",\n            \"type\": \"<string>\",\n            \"id\": {\n              \"value\": \"<string>\",\n              \"_type\": \"<string>\"\n            }\n          }\n        },\n        \"_type\": \"UPDATE_AUDIT\",\n        \"description\": {\n          \"value\": \"in nulla elit\",\n          \"_type\": \"DV_TEXT\",\n          \"hyperlink\": {},\n          \"formatting\": \"occaecat consectetur dolore\",\n          \"language\": {},\n          \"encoding\": {}\n        }\n      },\n      \"preceding_version_uid\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      },\n      \"signature\": \"<string>\",\n      \"attestations\": [\n        {\n          \"change_type\": {\n            \"terminology_id\": \"<string>\",\n            \"code_string\": \"<string>\",\n            \"terminology_version\": \"<string>\",\n            \"uri\": \"<uri>\"\n          },\n          \"committer\": {\n            \"_type\": \"<string>\",\n            \"external_ref\": {\n              \"namespace\": \"<string>\",\n              \"type\": \"<string>\",\n              \"id\": {\n                \"value\": \"<string>\",\n                \"_type\": \"<string>\"\n              }\n            }\n          },\n          \"is_pending\": false,\n          \"reason\": {},\n          \"_type\": \"UPDATE_AUDIT\",\n          \"attested_view\": {},\n          \"proof\": \"velit sunt Duis dolor culpa\",\n          \"description\": {\n            \"value\": \"Duis ipsum quis\",\n            \"_type\": \"DV_TEXT\",\n            \"hyperlink\": {},\n            \"formatting\": \"reprehenderit ut ex ut eiusmod\",\n            \"language\": {},\n            \"encoding\": {}\n          }\n        },\n        {\n          \"change_type\": {\n            \"terminology_id\": \"<string>\",\n            \"code_string\": \"<string>\",\n            \"terminology_version\": \"<string>\",\n            \"uri\": \"<uri>\"\n          },\n          \"committer\": {\n            \"_type\": \"<string>\",\n            \"external_ref\": {\n              \"namespace\": \"<string>\",\n              \"type\": \"<string>\",\n              \"id\": {\n                \"value\": \"<string>\",\n                \"_type\": \"<string>\"\n              }\n            }\n          },\n          \"is_pending\": true,\n          \"reason\": {},\n          \"_type\": \"UPDATE_AUDIT\",\n          \"attested_view\": {},\n          \"proof\": \"est laboris irure ut\",\n          \"description\": {\n            \"value\": \"exercitation ut id velit\",\n            \"_type\": \"DV_TEXT\",\n            \"hyperlink\": {},\n            \"formatting\": \"sed ad\",\n            \"language\": {},\n            \"encoding\": {}\n          }\n        }\n      ]\n    }\n  ],\n  \"audit\": {\n    \"change_type\": {\n      \"terminology_id\": \"<string>\",\n      \"code_string\": \"<string>\",\n      \"terminology_version\": \"<string>\",\n      \"uri\": \"<uri>\"\n    },\n    \"committer\": {\n      \"_type\": \"<string>\",\n      \"external_ref\": {\n        \"namespace\": \"<string>\",\n        \"type\": \"<string>\",\n        \"id\": {\n          \"value\": \"<string>\",\n          \"_type\": \"<string>\"\n        }\n      }\n    },\n    \"_type\": \"UPDATE_AUDIT\",\n    \"description\": {\n      \"value\": \"laborum id in est\",\n      \"_type\": \"DV_TEXT\",\n      \"hyperlink\": {},\n      \"formatting\": \"Ut occaecat voluptate\",\n      \"language\": {},\n      \"encoding\": {}\n    }\n  },\n  \"uid\": {\n    \"value\": \"<string>\",\n    \"_type\": \"<string>\"\n  }\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ehr/:ehr_id/contribution",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ehr",
								":ehr_id",
								"contribution"
							],
							"variable": [
								{
									"id": "f1260a5c-f527-4e66-a23c-eac3efb308bd",
									"key": "ehr_id",
									"value": "<uuid>",
									"description": "(Required) EHR identifier taken from EHR.ehr_id.value.\n"
								}
							]
						},
						"description": "We will use the relaxed CONTRIBUTION with the following optional attributes:\n  - `uid`: when provided, it will be accepted in case is not in-use, otherwise error will be returned\n  - `audit.time_committed`: server will always set it\n  - `audit.system_id`: when provided, it will be validated\n"
					},
					"response": [
						{
							"id": "73bf2f86-9d7e-4d2c-b565-62016294cf6d",
							"name": "`201 Created` is returned when the CONTRIBUTION was created. \nContent body is only returned when `Prefer` header has `return=representation`, otherwise only headers are returned.\n",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"versions\": [\n    {\n      \"lifecycle_state\": {\n        \"terminology_id\": \"<string>\",\n        \"code_string\": \"<string>\",\n        \"terminology_version\": \"<string>\",\n        \"uri\": \"<uri>\"\n      },\n      \"data\": {\n        \"name\": {},\n        \"archetype_node_id\": \"consequat dolore cillum anim\",\n        \"uid\": {},\n        \"archetype_details\": {},\n        \"feeder_audit\": {},\n        \"_type\": \"<string>\"\n      },\n      \"commit_audit\": {\n        \"change_type\": {\n          \"terminology_id\": \"<string>\",\n          \"code_string\": \"<string>\",\n          \"terminology_version\": \"<string>\",\n          \"uri\": \"<uri>\"\n        },\n        \"committer\": {\n          \"_type\": \"<string>\",\n          \"external_ref\": {\n            \"namespace\": \"<string>\",\n            \"type\": \"<string>\",\n            \"id\": {\n              \"value\": \"<string>\",\n              \"_type\": \"<string>\"\n            }\n          }\n        },\n        \"_type\": \"UPDATE_AUDIT\",\n        \"description\": {\n          \"value\": \"dolore\",\n          \"_type\": \"DV_TEXT\",\n          \"hyperlink\": {},\n          \"formatting\": \"Duis consequat in anim\",\n          \"language\": {},\n          \"encoding\": {}\n        }\n      },\n      \"preceding_version_uid\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      },\n      \"signature\": \"<string>\",\n      \"attestations\": [\n        {\n          \"change_type\": {\n            \"terminology_id\": \"<string>\",\n            \"code_string\": \"<string>\",\n            \"terminology_version\": \"<string>\",\n            \"uri\": \"<uri>\"\n          },\n          \"committer\": {\n            \"_type\": \"<string>\",\n            \"external_ref\": {\n              \"namespace\": \"<string>\",\n              \"type\": \"<string>\",\n              \"id\": {\n                \"value\": \"<string>\",\n                \"_type\": \"<string>\"\n              }\n            }\n          },\n          \"is_pending\": false,\n          \"reason\": {},\n          \"_type\": \"UPDATE_AUDIT\",\n          \"attested_view\": {},\n          \"proof\": \"do\",\n          \"description\": {\n            \"value\": \"reprehenderit magna\",\n            \"_type\": \"DV_TEXT\",\n            \"hyperlink\": {},\n            \"formatting\": \"exercitation nulla proident velit ut\",\n            \"language\": {},\n            \"encoding\": {}\n          }\n        },\n        {\n          \"change_type\": {\n            \"terminology_id\": \"<string>\",\n            \"code_string\": \"<string>\",\n            \"terminology_version\": \"<string>\",\n            \"uri\": \"<uri>\"\n          },\n          \"committer\": {\n            \"_type\": \"<string>\",\n            \"external_ref\": {\n              \"namespace\": \"<string>\",\n              \"type\": \"<string>\",\n              \"id\": {\n                \"value\": \"<string>\",\n                \"_type\": \"<string>\"\n              }\n            }\n          },\n          \"is_pending\": true,\n          \"reason\": {},\n          \"_type\": \"UPDATE_AUDIT\",\n          \"attested_view\": {},\n          \"proof\": \"nulla fugiat non\",\n          \"description\": {\n            \"value\": \"eu aute\",\n            \"_type\": \"DV_TEXT\",\n            \"hyperlink\": {},\n            \"formatting\": \"quis sed\",\n            \"language\": {},\n            \"encoding\": {}\n          }\n        }\n      ]\n    },\n    {\n      \"lifecycle_state\": {\n        \"terminology_id\": \"<string>\",\n        \"code_string\": \"<string>\",\n        \"terminology_version\": \"<string>\",\n        \"uri\": \"<uri>\"\n      },\n      \"data\": {\n        \"name\": {},\n        \"archetype_node_id\": \"officia nisi\",\n        \"uid\": {},\n        \"archetype_details\": {},\n        \"feeder_audit\": {},\n        \"_type\": \"<string>\"\n      },\n      \"commit_audit\": {\n        \"change_type\": {\n          \"terminology_id\": \"<string>\",\n          \"code_string\": \"<string>\",\n          \"terminology_version\": \"<string>\",\n          \"uri\": \"<uri>\"\n        },\n        \"committer\": {\n          \"_type\": \"<string>\",\n          \"external_ref\": {\n            \"namespace\": \"<string>\",\n            \"type\": \"<string>\",\n            \"id\": {\n              \"value\": \"<string>\",\n              \"_type\": \"<string>\"\n            }\n          }\n        },\n        \"_type\": \"UPDATE_AUDIT\",\n        \"description\": {\n          \"value\": \"in nulla elit\",\n          \"_type\": \"DV_TEXT\",\n          \"hyperlink\": {},\n          \"formatting\": \"occaecat consectetur dolore\",\n          \"language\": {},\n          \"encoding\": {}\n        }\n      },\n      \"preceding_version_uid\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      },\n      \"signature\": \"<string>\",\n      \"attestations\": [\n        {\n          \"change_type\": {\n            \"terminology_id\": \"<string>\",\n            \"code_string\": \"<string>\",\n            \"terminology_version\": \"<string>\",\n            \"uri\": \"<uri>\"\n          },\n          \"committer\": {\n            \"_type\": \"<string>\",\n            \"external_ref\": {\n              \"namespace\": \"<string>\",\n              \"type\": \"<string>\",\n              \"id\": {\n                \"value\": \"<string>\",\n                \"_type\": \"<string>\"\n              }\n            }\n          },\n          \"is_pending\": false,\n          \"reason\": {},\n          \"_type\": \"UPDATE_AUDIT\",\n          \"attested_view\": {},\n          \"proof\": \"velit sunt Duis dolor culpa\",\n          \"description\": {\n            \"value\": \"Duis ipsum quis\",\n            \"_type\": \"DV_TEXT\",\n            \"hyperlink\": {},\n            \"formatting\": \"reprehenderit ut ex ut eiusmod\",\n            \"language\": {},\n            \"encoding\": {}\n          }\n        },\n        {\n          \"change_type\": {\n            \"terminology_id\": \"<string>\",\n            \"code_string\": \"<string>\",\n            \"terminology_version\": \"<string>\",\n            \"uri\": \"<uri>\"\n          },\n          \"committer\": {\n            \"_type\": \"<string>\",\n            \"external_ref\": {\n              \"namespace\": \"<string>\",\n              \"type\": \"<string>\",\n              \"id\": {\n                \"value\": \"<string>\",\n                \"_type\": \"<string>\"\n              }\n            }\n          },\n          \"is_pending\": true,\n          \"reason\": {},\n          \"_type\": \"UPDATE_AUDIT\",\n          \"attested_view\": {},\n          \"proof\": \"est laboris irure ut\",\n          \"description\": {\n            \"value\": \"exercitation ut id velit\",\n            \"_type\": \"DV_TEXT\",\n            \"hyperlink\": {},\n            \"formatting\": \"sed ad\",\n            \"language\": {},\n            \"encoding\": {}\n          }\n        }\n      ]\n    }\n  ],\n  \"audit\": {\n    \"change_type\": {\n      \"terminology_id\": \"<string>\",\n      \"code_string\": \"<string>\",\n      \"terminology_version\": \"<string>\",\n      \"uri\": \"<uri>\"\n    },\n    \"committer\": {\n      \"_type\": \"<string>\",\n      \"external_ref\": {\n        \"namespace\": \"<string>\",\n        \"type\": \"<string>\",\n        \"id\": {\n          \"value\": \"<string>\",\n          \"_type\": \"<string>\"\n        }\n      }\n    },\n    \"_type\": \"UPDATE_AUDIT\",\n    \"description\": {\n      \"value\": \"laborum id in est\",\n      \"_type\": \"DV_TEXT\",\n      \"hyperlink\": {},\n      \"formatting\": \"Ut occaecat voluptate\",\n      \"language\": {},\n      \"encoding\": {}\n    }\n  },\n  \"uid\": {\n    \"value\": \"<string>\",\n    \"_type\": \"<string>\"\n  }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/contribution",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"contribution"
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "ETag",
									"value": ""
								},
								{
									"disabled": false,
									"description": {
										"content": "",
										"type": "text/plain"
									},
									"key": "Location",
									"value": ""
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"uid\": {\n    \"value\": \"<string>\",\n    \"_type\": \"<string>\"\n  },\n  \"versions\": [\n    {\n      \"namespace\": \"<string>\",\n      \"type\": \"<string>\",\n      \"id\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      }\n    },\n    {\n      \"namespace\": \"<string>\",\n      \"type\": \"<string>\",\n      \"id\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      }\n    }\n  ],\n  \"audit\": {\n    \"system_id\": \"<string>\",\n    \"time_committed\": {\n      \"value\": \"1974-11-08T02:47:20.632Z\",\n      \"_type\": \"DV_TEMPORAL\",\n      \"accuracy\": {},\n      \"magnitude_status\": \"=\",\n      \"normal_status\": {},\n      \"normal_range\": {}\n    },\n    \"change_type\": {\n      \"defining_code\": {},\n      \"value\": \"laborum aute Duis ad\",\n      \"_type\": \"DV_TEXT\",\n      \"hyperlink\": {},\n      \"formatting\": \"pariatur occaecat veniam\",\n      \"language\": {},\n      \"encoding\": {}\n    },\n    \"committer\": {\n      \"_type\": \"<string>\",\n      \"external_ref\": {\n        \"namespace\": \"<string>\",\n        \"type\": \"<string>\",\n        \"id\": {\n          \"value\": \"<string>\",\n          \"_type\": \"<string>\"\n        }\n      }\n    },\n    \"_type\": \"AUDIT_DETAILS\",\n    \"description\": {\n      \"value\": \"labore\",\n      \"_type\": \"DV_TEXT\",\n      \"hyperlink\": {},\n      \"formatting\": \"commodo ea\",\n      \"language\": {},\n      \"encoding\": {}\n    }\n  }\n}"
						},
						{
							"id": "11fa9ca4-9d95-4f66-9ad9-e390bb20097b",
							"name": "`400 Bad Request` is returned when the request could not be parsed or is invalid (e.g. malformed request URL syntax, missing required header or parameter, or syntactically invalid header, parameter or content, or the modification type does not match the o",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"versions\": [\n    {\n      \"lifecycle_state\": {\n        \"terminology_id\": \"<string>\",\n        \"code_string\": \"<string>\",\n        \"terminology_version\": \"<string>\",\n        \"uri\": \"<uri>\"\n      },\n      \"data\": {\n        \"name\": {},\n        \"archetype_node_id\": \"consequat dolore cillum anim\",\n        \"uid\": {},\n        \"archetype_details\": {},\n        \"feeder_audit\": {},\n        \"_type\": \"<string>\"\n      },\n      \"commit_audit\": {\n        \"change_type\": {\n          \"terminology_id\": \"<string>\",\n          \"code_string\": \"<string>\",\n          \"terminology_version\": \"<string>\",\n          \"uri\": \"<uri>\"\n        },\n        \"committer\": {\n          \"_type\": \"<string>\",\n          \"external_ref\": {\n            \"namespace\": \"<string>\",\n            \"type\": \"<string>\",\n            \"id\": {\n              \"value\": \"<string>\",\n              \"_type\": \"<string>\"\n            }\n          }\n        },\n        \"_type\": \"UPDATE_AUDIT\",\n        \"description\": {\n          \"value\": \"dolore\",\n          \"_type\": \"DV_TEXT\",\n          \"hyperlink\": {},\n          \"formatting\": \"Duis consequat in anim\",\n          \"language\": {},\n          \"encoding\": {}\n        }\n      },\n      \"preceding_version_uid\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      },\n      \"signature\": \"<string>\",\n      \"attestations\": [\n        {\n          \"change_type\": {\n            \"terminology_id\": \"<string>\",\n            \"code_string\": \"<string>\",\n            \"terminology_version\": \"<string>\",\n            \"uri\": \"<uri>\"\n          },\n          \"committer\": {\n            \"_type\": \"<string>\",\n            \"external_ref\": {\n              \"namespace\": \"<string>\",\n              \"type\": \"<string>\",\n              \"id\": {\n                \"value\": \"<string>\",\n                \"_type\": \"<string>\"\n              }\n            }\n          },\n          \"is_pending\": false,\n          \"reason\": {},\n          \"_type\": \"UPDATE_AUDIT\",\n          \"attested_view\": {},\n          \"proof\": \"do\",\n          \"description\": {\n            \"value\": \"reprehenderit magna\",\n            \"_type\": \"DV_TEXT\",\n            \"hyperlink\": {},\n            \"formatting\": \"exercitation nulla proident velit ut\",\n            \"language\": {},\n            \"encoding\": {}\n          }\n        },\n        {\n          \"change_type\": {\n            \"terminology_id\": \"<string>\",\n            \"code_string\": \"<string>\",\n            \"terminology_version\": \"<string>\",\n            \"uri\": \"<uri>\"\n          },\n          \"committer\": {\n            \"_type\": \"<string>\",\n            \"external_ref\": {\n              \"namespace\": \"<string>\",\n              \"type\": \"<string>\",\n              \"id\": {\n                \"value\": \"<string>\",\n                \"_type\": \"<string>\"\n              }\n            }\n          },\n          \"is_pending\": true,\n          \"reason\": {},\n          \"_type\": \"UPDATE_AUDIT\",\n          \"attested_view\": {},\n          \"proof\": \"nulla fugiat non\",\n          \"description\": {\n            \"value\": \"eu aute\",\n            \"_type\": \"DV_TEXT\",\n            \"hyperlink\": {},\n            \"formatting\": \"quis sed\",\n            \"language\": {},\n            \"encoding\": {}\n          }\n        }\n      ]\n    },\n    {\n      \"lifecycle_state\": {\n        \"terminology_id\": \"<string>\",\n        \"code_string\": \"<string>\",\n        \"terminology_version\": \"<string>\",\n        \"uri\": \"<uri>\"\n      },\n      \"data\": {\n        \"name\": {},\n        \"archetype_node_id\": \"officia nisi\",\n        \"uid\": {},\n        \"archetype_details\": {},\n        \"feeder_audit\": {},\n        \"_type\": \"<string>\"\n      },\n      \"commit_audit\": {\n        \"change_type\": {\n          \"terminology_id\": \"<string>\",\n          \"code_string\": \"<string>\",\n          \"terminology_version\": \"<string>\",\n          \"uri\": \"<uri>\"\n        },\n        \"committer\": {\n          \"_type\": \"<string>\",\n          \"external_ref\": {\n            \"namespace\": \"<string>\",\n            \"type\": \"<string>\",\n            \"id\": {\n              \"value\": \"<string>\",\n              \"_type\": \"<string>\"\n            }\n          }\n        },\n        \"_type\": \"UPDATE_AUDIT\",\n        \"description\": {\n          \"value\": \"in nulla elit\",\n          \"_type\": \"DV_TEXT\",\n          \"hyperlink\": {},\n          \"formatting\": \"occaecat consectetur dolore\",\n          \"language\": {},\n          \"encoding\": {}\n        }\n      },\n      \"preceding_version_uid\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      },\n      \"signature\": \"<string>\",\n      \"attestations\": [\n        {\n          \"change_type\": {\n            \"terminology_id\": \"<string>\",\n            \"code_string\": \"<string>\",\n            \"terminology_version\": \"<string>\",\n            \"uri\": \"<uri>\"\n          },\n          \"committer\": {\n            \"_type\": \"<string>\",\n            \"external_ref\": {\n              \"namespace\": \"<string>\",\n              \"type\": \"<string>\",\n              \"id\": {\n                \"value\": \"<string>\",\n                \"_type\": \"<string>\"\n              }\n            }\n          },\n          \"is_pending\": false,\n          \"reason\": {},\n          \"_type\": \"UPDATE_AUDIT\",\n          \"attested_view\": {},\n          \"proof\": \"velit sunt Duis dolor culpa\",\n          \"description\": {\n            \"value\": \"Duis ipsum quis\",\n            \"_type\": \"DV_TEXT\",\n            \"hyperlink\": {},\n            \"formatting\": \"reprehenderit ut ex ut eiusmod\",\n            \"language\": {},\n            \"encoding\": {}\n          }\n        },\n        {\n          \"change_type\": {\n            \"terminology_id\": \"<string>\",\n            \"code_string\": \"<string>\",\n            \"terminology_version\": \"<string>\",\n            \"uri\": \"<uri>\"\n          },\n          \"committer\": {\n            \"_type\": \"<string>\",\n            \"external_ref\": {\n              \"namespace\": \"<string>\",\n              \"type\": \"<string>\",\n              \"id\": {\n                \"value\": \"<string>\",\n                \"_type\": \"<string>\"\n              }\n            }\n          },\n          \"is_pending\": true,\n          \"reason\": {},\n          \"_type\": \"UPDATE_AUDIT\",\n          \"attested_view\": {},\n          \"proof\": \"est laboris irure ut\",\n          \"description\": {\n            \"value\": \"exercitation ut id velit\",\n            \"_type\": \"DV_TEXT\",\n            \"hyperlink\": {},\n            \"formatting\": \"sed ad\",\n            \"language\": {},\n            \"encoding\": {}\n          }\n        }\n      ]\n    }\n  ],\n  \"audit\": {\n    \"change_type\": {\n      \"terminology_id\": \"<string>\",\n      \"code_string\": \"<string>\",\n      \"terminology_version\": \"<string>\",\n      \"uri\": \"<uri>\"\n    },\n    \"committer\": {\n      \"_type\": \"<string>\",\n      \"external_ref\": {\n        \"namespace\": \"<string>\",\n        \"type\": \"<string>\",\n        \"id\": {\n          \"value\": \"<string>\",\n          \"_type\": \"<string>\"\n        }\n      }\n    },\n    \"_type\": \"UPDATE_AUDIT\",\n    \"description\": {\n      \"value\": \"laborum id in est\",\n      \"_type\": \"DV_TEXT\",\n      \"hyperlink\": {},\n      \"formatting\": \"Ut occaecat voluptate\",\n      \"language\": {},\n      \"encoding\": {}\n    }\n  },\n  \"uid\": {\n    \"value\": \"<string>\",\n    \"_type\": \"<string>\"\n  }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/contribution",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"contribution"
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"message\": \"<string>\",\n  \"validationErrors\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}"
						},
						{
							"id": "126b5bab-26e6-42fb-b564-f7d89555cd77",
							"name": "`404 Not Found` is returned when an EHR with `ehr_id` does not exist.\n",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"versions\": [\n    {\n      \"lifecycle_state\": {\n        \"terminology_id\": \"<string>\",\n        \"code_string\": \"<string>\",\n        \"terminology_version\": \"<string>\",\n        \"uri\": \"<uri>\"\n      },\n      \"data\": {\n        \"name\": {},\n        \"archetype_node_id\": \"consequat dolore cillum anim\",\n        \"uid\": {},\n        \"archetype_details\": {},\n        \"feeder_audit\": {},\n        \"_type\": \"<string>\"\n      },\n      \"commit_audit\": {\n        \"change_type\": {\n          \"terminology_id\": \"<string>\",\n          \"code_string\": \"<string>\",\n          \"terminology_version\": \"<string>\",\n          \"uri\": \"<uri>\"\n        },\n        \"committer\": {\n          \"_type\": \"<string>\",\n          \"external_ref\": {\n            \"namespace\": \"<string>\",\n            \"type\": \"<string>\",\n            \"id\": {\n              \"value\": \"<string>\",\n              \"_type\": \"<string>\"\n            }\n          }\n        },\n        \"_type\": \"UPDATE_AUDIT\",\n        \"description\": {\n          \"value\": \"dolore\",\n          \"_type\": \"DV_TEXT\",\n          \"hyperlink\": {},\n          \"formatting\": \"Duis consequat in anim\",\n          \"language\": {},\n          \"encoding\": {}\n        }\n      },\n      \"preceding_version_uid\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      },\n      \"signature\": \"<string>\",\n      \"attestations\": [\n        {\n          \"change_type\": {\n            \"terminology_id\": \"<string>\",\n            \"code_string\": \"<string>\",\n            \"terminology_version\": \"<string>\",\n            \"uri\": \"<uri>\"\n          },\n          \"committer\": {\n            \"_type\": \"<string>\",\n            \"external_ref\": {\n              \"namespace\": \"<string>\",\n              \"type\": \"<string>\",\n              \"id\": {\n                \"value\": \"<string>\",\n                \"_type\": \"<string>\"\n              }\n            }\n          },\n          \"is_pending\": false,\n          \"reason\": {},\n          \"_type\": \"UPDATE_AUDIT\",\n          \"attested_view\": {},\n          \"proof\": \"do\",\n          \"description\": {\n            \"value\": \"reprehenderit magna\",\n            \"_type\": \"DV_TEXT\",\n            \"hyperlink\": {},\n            \"formatting\": \"exercitation nulla proident velit ut\",\n            \"language\": {},\n            \"encoding\": {}\n          }\n        },\n        {\n          \"change_type\": {\n            \"terminology_id\": \"<string>\",\n            \"code_string\": \"<string>\",\n            \"terminology_version\": \"<string>\",\n            \"uri\": \"<uri>\"\n          },\n          \"committer\": {\n            \"_type\": \"<string>\",\n            \"external_ref\": {\n              \"namespace\": \"<string>\",\n              \"type\": \"<string>\",\n              \"id\": {\n                \"value\": \"<string>\",\n                \"_type\": \"<string>\"\n              }\n            }\n          },\n          \"is_pending\": true,\n          \"reason\": {},\n          \"_type\": \"UPDATE_AUDIT\",\n          \"attested_view\": {},\n          \"proof\": \"nulla fugiat non\",\n          \"description\": {\n            \"value\": \"eu aute\",\n            \"_type\": \"DV_TEXT\",\n            \"hyperlink\": {},\n            \"formatting\": \"quis sed\",\n            \"language\": {},\n            \"encoding\": {}\n          }\n        }\n      ]\n    },\n    {\n      \"lifecycle_state\": {\n        \"terminology_id\": \"<string>\",\n        \"code_string\": \"<string>\",\n        \"terminology_version\": \"<string>\",\n        \"uri\": \"<uri>\"\n      },\n      \"data\": {\n        \"name\": {},\n        \"archetype_node_id\": \"officia nisi\",\n        \"uid\": {},\n        \"archetype_details\": {},\n        \"feeder_audit\": {},\n        \"_type\": \"<string>\"\n      },\n      \"commit_audit\": {\n        \"change_type\": {\n          \"terminology_id\": \"<string>\",\n          \"code_string\": \"<string>\",\n          \"terminology_version\": \"<string>\",\n          \"uri\": \"<uri>\"\n        },\n        \"committer\": {\n          \"_type\": \"<string>\",\n          \"external_ref\": {\n            \"namespace\": \"<string>\",\n            \"type\": \"<string>\",\n            \"id\": {\n              \"value\": \"<string>\",\n              \"_type\": \"<string>\"\n            }\n          }\n        },\n        \"_type\": \"UPDATE_AUDIT\",\n        \"description\": {\n          \"value\": \"in nulla elit\",\n          \"_type\": \"DV_TEXT\",\n          \"hyperlink\": {},\n          \"formatting\": \"occaecat consectetur dolore\",\n          \"language\": {},\n          \"encoding\": {}\n        }\n      },\n      \"preceding_version_uid\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      },\n      \"signature\": \"<string>\",\n      \"attestations\": [\n        {\n          \"change_type\": {\n            \"terminology_id\": \"<string>\",\n            \"code_string\": \"<string>\",\n            \"terminology_version\": \"<string>\",\n            \"uri\": \"<uri>\"\n          },\n          \"committer\": {\n            \"_type\": \"<string>\",\n            \"external_ref\": {\n              \"namespace\": \"<string>\",\n              \"type\": \"<string>\",\n              \"id\": {\n                \"value\": \"<string>\",\n                \"_type\": \"<string>\"\n              }\n            }\n          },\n          \"is_pending\": false,\n          \"reason\": {},\n          \"_type\": \"UPDATE_AUDIT\",\n          \"attested_view\": {},\n          \"proof\": \"velit sunt Duis dolor culpa\",\n          \"description\": {\n            \"value\": \"Duis ipsum quis\",\n            \"_type\": \"DV_TEXT\",\n            \"hyperlink\": {},\n            \"formatting\": \"reprehenderit ut ex ut eiusmod\",\n            \"language\": {},\n            \"encoding\": {}\n          }\n        },\n        {\n          \"change_type\": {\n            \"terminology_id\": \"<string>\",\n            \"code_string\": \"<string>\",\n            \"terminology_version\": \"<string>\",\n            \"uri\": \"<uri>\"\n          },\n          \"committer\": {\n            \"_type\": \"<string>\",\n            \"external_ref\": {\n              \"namespace\": \"<string>\",\n              \"type\": \"<string>\",\n              \"id\": {\n                \"value\": \"<string>\",\n                \"_type\": \"<string>\"\n              }\n            }\n          },\n          \"is_pending\": true,\n          \"reason\": {},\n          \"_type\": \"UPDATE_AUDIT\",\n          \"attested_view\": {},\n          \"proof\": \"est laboris irure ut\",\n          \"description\": {\n            \"value\": \"exercitation ut id velit\",\n            \"_type\": \"DV_TEXT\",\n            \"hyperlink\": {},\n            \"formatting\": \"sed ad\",\n            \"language\": {},\n            \"encoding\": {}\n          }\n        }\n      ]\n    }\n  ],\n  \"audit\": {\n    \"change_type\": {\n      \"terminology_id\": \"<string>\",\n      \"code_string\": \"<string>\",\n      \"terminology_version\": \"<string>\",\n      \"uri\": \"<uri>\"\n    },\n    \"committer\": {\n      \"_type\": \"<string>\",\n      \"external_ref\": {\n        \"namespace\": \"<string>\",\n        \"type\": \"<string>\",\n        \"id\": {\n          \"value\": \"<string>\",\n          \"_type\": \"<string>\"\n        }\n      }\n    },\n    \"_type\": \"UPDATE_AUDIT\",\n    \"description\": {\n      \"value\": \"laborum id in est\",\n      \"_type\": \"DV_TEXT\",\n      \"hyperlink\": {},\n      \"formatting\": \"Ut occaecat voluptate\",\n      \"language\": {},\n      \"encoding\": {}\n    }\n  },\n  \"uid\": {\n    \"value\": \"<string>\",\n    \"_type\": \"<string>\"\n  }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/contribution",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"contribution"
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "96ddb96e-6eff-4927-99b7-e9b6ca784d08",
							"name": "`409 Conflict` is returned when a resource with same identifier(s) already exists.\n",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"versions\": [\n    {\n      \"lifecycle_state\": {\n        \"terminology_id\": \"<string>\",\n        \"code_string\": \"<string>\",\n        \"terminology_version\": \"<string>\",\n        \"uri\": \"<uri>\"\n      },\n      \"data\": {\n        \"name\": {},\n        \"archetype_node_id\": \"consequat dolore cillum anim\",\n        \"uid\": {},\n        \"archetype_details\": {},\n        \"feeder_audit\": {},\n        \"_type\": \"<string>\"\n      },\n      \"commit_audit\": {\n        \"change_type\": {\n          \"terminology_id\": \"<string>\",\n          \"code_string\": \"<string>\",\n          \"terminology_version\": \"<string>\",\n          \"uri\": \"<uri>\"\n        },\n        \"committer\": {\n          \"_type\": \"<string>\",\n          \"external_ref\": {\n            \"namespace\": \"<string>\",\n            \"type\": \"<string>\",\n            \"id\": {\n              \"value\": \"<string>\",\n              \"_type\": \"<string>\"\n            }\n          }\n        },\n        \"_type\": \"UPDATE_AUDIT\",\n        \"description\": {\n          \"value\": \"dolore\",\n          \"_type\": \"DV_TEXT\",\n          \"hyperlink\": {},\n          \"formatting\": \"Duis consequat in anim\",\n          \"language\": {},\n          \"encoding\": {}\n        }\n      },\n      \"preceding_version_uid\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      },\n      \"signature\": \"<string>\",\n      \"attestations\": [\n        {\n          \"change_type\": {\n            \"terminology_id\": \"<string>\",\n            \"code_string\": \"<string>\",\n            \"terminology_version\": \"<string>\",\n            \"uri\": \"<uri>\"\n          },\n          \"committer\": {\n            \"_type\": \"<string>\",\n            \"external_ref\": {\n              \"namespace\": \"<string>\",\n              \"type\": \"<string>\",\n              \"id\": {\n                \"value\": \"<string>\",\n                \"_type\": \"<string>\"\n              }\n            }\n          },\n          \"is_pending\": false,\n          \"reason\": {},\n          \"_type\": \"UPDATE_AUDIT\",\n          \"attested_view\": {},\n          \"proof\": \"do\",\n          \"description\": {\n            \"value\": \"reprehenderit magna\",\n            \"_type\": \"DV_TEXT\",\n            \"hyperlink\": {},\n            \"formatting\": \"exercitation nulla proident velit ut\",\n            \"language\": {},\n            \"encoding\": {}\n          }\n        },\n        {\n          \"change_type\": {\n            \"terminology_id\": \"<string>\",\n            \"code_string\": \"<string>\",\n            \"terminology_version\": \"<string>\",\n            \"uri\": \"<uri>\"\n          },\n          \"committer\": {\n            \"_type\": \"<string>\",\n            \"external_ref\": {\n              \"namespace\": \"<string>\",\n              \"type\": \"<string>\",\n              \"id\": {\n                \"value\": \"<string>\",\n                \"_type\": \"<string>\"\n              }\n            }\n          },\n          \"is_pending\": true,\n          \"reason\": {},\n          \"_type\": \"UPDATE_AUDIT\",\n          \"attested_view\": {},\n          \"proof\": \"nulla fugiat non\",\n          \"description\": {\n            \"value\": \"eu aute\",\n            \"_type\": \"DV_TEXT\",\n            \"hyperlink\": {},\n            \"formatting\": \"quis sed\",\n            \"language\": {},\n            \"encoding\": {}\n          }\n        }\n      ]\n    },\n    {\n      \"lifecycle_state\": {\n        \"terminology_id\": \"<string>\",\n        \"code_string\": \"<string>\",\n        \"terminology_version\": \"<string>\",\n        \"uri\": \"<uri>\"\n      },\n      \"data\": {\n        \"name\": {},\n        \"archetype_node_id\": \"officia nisi\",\n        \"uid\": {},\n        \"archetype_details\": {},\n        \"feeder_audit\": {},\n        \"_type\": \"<string>\"\n      },\n      \"commit_audit\": {\n        \"change_type\": {\n          \"terminology_id\": \"<string>\",\n          \"code_string\": \"<string>\",\n          \"terminology_version\": \"<string>\",\n          \"uri\": \"<uri>\"\n        },\n        \"committer\": {\n          \"_type\": \"<string>\",\n          \"external_ref\": {\n            \"namespace\": \"<string>\",\n            \"type\": \"<string>\",\n            \"id\": {\n              \"value\": \"<string>\",\n              \"_type\": \"<string>\"\n            }\n          }\n        },\n        \"_type\": \"UPDATE_AUDIT\",\n        \"description\": {\n          \"value\": \"in nulla elit\",\n          \"_type\": \"DV_TEXT\",\n          \"hyperlink\": {},\n          \"formatting\": \"occaecat consectetur dolore\",\n          \"language\": {},\n          \"encoding\": {}\n        }\n      },\n      \"preceding_version_uid\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      },\n      \"signature\": \"<string>\",\n      \"attestations\": [\n        {\n          \"change_type\": {\n            \"terminology_id\": \"<string>\",\n            \"code_string\": \"<string>\",\n            \"terminology_version\": \"<string>\",\n            \"uri\": \"<uri>\"\n          },\n          \"committer\": {\n            \"_type\": \"<string>\",\n            \"external_ref\": {\n              \"namespace\": \"<string>\",\n              \"type\": \"<string>\",\n              \"id\": {\n                \"value\": \"<string>\",\n                \"_type\": \"<string>\"\n              }\n            }\n          },\n          \"is_pending\": false,\n          \"reason\": {},\n          \"_type\": \"UPDATE_AUDIT\",\n          \"attested_view\": {},\n          \"proof\": \"velit sunt Duis dolor culpa\",\n          \"description\": {\n            \"value\": \"Duis ipsum quis\",\n            \"_type\": \"DV_TEXT\",\n            \"hyperlink\": {},\n            \"formatting\": \"reprehenderit ut ex ut eiusmod\",\n            \"language\": {},\n            \"encoding\": {}\n          }\n        },\n        {\n          \"change_type\": {\n            \"terminology_id\": \"<string>\",\n            \"code_string\": \"<string>\",\n            \"terminology_version\": \"<string>\",\n            \"uri\": \"<uri>\"\n          },\n          \"committer\": {\n            \"_type\": \"<string>\",\n            \"external_ref\": {\n              \"namespace\": \"<string>\",\n              \"type\": \"<string>\",\n              \"id\": {\n                \"value\": \"<string>\",\n                \"_type\": \"<string>\"\n              }\n            }\n          },\n          \"is_pending\": true,\n          \"reason\": {},\n          \"_type\": \"UPDATE_AUDIT\",\n          \"attested_view\": {},\n          \"proof\": \"est laboris irure ut\",\n          \"description\": {\n            \"value\": \"exercitation ut id velit\",\n            \"_type\": \"DV_TEXT\",\n            \"hyperlink\": {},\n            \"formatting\": \"sed ad\",\n            \"language\": {},\n            \"encoding\": {}\n          }\n        }\n      ]\n    }\n  ],\n  \"audit\": {\n    \"change_type\": {\n      \"terminology_id\": \"<string>\",\n      \"code_string\": \"<string>\",\n      \"terminology_version\": \"<string>\",\n      \"uri\": \"<uri>\"\n    },\n    \"committer\": {\n      \"_type\": \"<string>\",\n      \"external_ref\": {\n        \"namespace\": \"<string>\",\n        \"type\": \"<string>\",\n        \"id\": {\n          \"value\": \"<string>\",\n          \"_type\": \"<string>\"\n        }\n      }\n    },\n    \"_type\": \"UPDATE_AUDIT\",\n    \"description\": {\n      \"value\": \"laborum id in est\",\n      \"_type\": \"DV_TEXT\",\n      \"hyperlink\": {},\n      \"formatting\": \"Ut occaecat voluptate\",\n      \"language\": {},\n      \"encoding\": {}\n    }\n  },\n  \"uid\": {\n    \"value\": \"<string>\",\n    \"_type\": \"<string>\"\n  }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/contribution",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"contribution"
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Get CONTRIBUTION by id",
					"id": "ed3e153c-ae90-4631-a44c-4b07ce261c8a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/ehr/:ehr_id/contribution/:contribution_uid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ehr",
								":ehr_id",
								"contribution",
								":contribution_uid"
							],
							"variable": [
								{
									"id": "a779671f-f3d6-41a1-a585-eaefd317368d",
									"key": "ehr_id",
									"value": "<uuid>",
									"description": "(Required) EHR identifier taken from EHR.ehr_id.value.\n"
								},
								{
									"id": "bbed1518-35ba-4d52-a56a-27b977c13969",
									"key": "contribution_uid",
									"value": "<uuid>",
									"description": "(Required) The CONTRIBUTION uid.\n"
								}
							]
						},
						"description": "Retrieves a CONTRIBUTION identified by `contribution_uid` and associated with the EHR identified by `ehr_id`.\n"
					},
					"response": [
						{
							"id": "93ab0ea2-845b-4444-84ee-59c17bc97822",
							"name": "`200 OK` is returned when the CONTRIBUTION is successfully retrieved.\n",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/contribution/:contribution_uid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"contribution",
										":contribution_uid"
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "contribution_uid"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"uid\": {\n    \"value\": \"<string>\",\n    \"_type\": \"<string>\"\n  },\n  \"versions\": [\n    {\n      \"namespace\": \"<string>\",\n      \"type\": \"<string>\",\n      \"id\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      }\n    },\n    {\n      \"namespace\": \"<string>\",\n      \"type\": \"<string>\",\n      \"id\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      }\n    }\n  ],\n  \"audit\": {\n    \"system_id\": \"<string>\",\n    \"time_committed\": {\n      \"value\": \"1974-11-08T02:47:20.632Z\",\n      \"_type\": \"DV_TEMPORAL\",\n      \"accuracy\": {},\n      \"magnitude_status\": \"=\",\n      \"normal_status\": {},\n      \"normal_range\": {}\n    },\n    \"change_type\": {\n      \"defining_code\": {},\n      \"value\": \"laborum aute Duis ad\",\n      \"_type\": \"DV_TEXT\",\n      \"hyperlink\": {},\n      \"formatting\": \"pariatur occaecat veniam\",\n      \"language\": {},\n      \"encoding\": {}\n    },\n    \"committer\": {\n      \"_type\": \"<string>\",\n      \"external_ref\": {\n        \"namespace\": \"<string>\",\n        \"type\": \"<string>\",\n        \"id\": {\n          \"value\": \"<string>\",\n          \"_type\": \"<string>\"\n        }\n      }\n    },\n    \"_type\": \"AUDIT_DETAILS\",\n    \"description\": {\n      \"value\": \"labore\",\n      \"_type\": \"DV_TEXT\",\n      \"hyperlink\": {},\n      \"formatting\": \"commodo ea\",\n      \"language\": {},\n      \"encoding\": {}\n    }\n  }\n}"
						},
						{
							"id": "1e34b62d-2b39-4ff6-b78d-3443deaf5cea",
							"name": "`404 Not Found` is returned when an EHR with `ehr_id` does not exist, or when a CONTRIBUTION with `contribution_uid` does not exist.\n",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/contribution/:contribution_uid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"contribution",
										":contribution_uid"
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "contribution_uid"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				}
			],
			"id": "6b696b55-8e59-4a15-9613-8c7e3d519b7e",
			"description": "Management of [CONTRIBUTION](https://specifications.openehr.org/releases/RM/latest/common.html#_contribution_class) resource.\nActions upon resources of this group are also formally described in the [I_EHR_CONTRIBUTION](https://specifications.openehr.org/releases/SM/development/openehr_platform.html#_i_ehr_contribution_interface) Abstract Service Model interface.\n"
		},
		{
			"name": "ITEM_TAG",
			"item": [
				{
					"name": "Get EHR tags",
					"id": "a7100b63-2262-45f8-85e6-865b9d05f114",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/ehr/:ehr_id/tags?tag_key=<string>&tag_value=<string>&tag_target_path=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ehr",
								":ehr_id",
								"tags"
							],
							"query": [
								{
									"key": "tag_key",
									"value": "<string>"
								},
								{
									"key": "tag_value",
									"value": "<string>"
								},
								{
									"key": "tag_target_path",
									"value": "<string>"
								}
							],
							"variable": [
								{
									"id": "c7504879-5e31-4ac6-a021-e50aa61a4093",
									"key": "ehr_id",
									"value": "<uuid>",
									"description": "(Required) EHR identifier taken from EHR.ehr_id.value.\n"
								}
							]
						},
						"description": "Retrieves the list of ITEM_TAG resources associated with any target VERSION or \nVERSIONED_OBJECT within the EHR identified by `ehr_id`. \n\nThis list can be filtered by the given one or more `tag_key`, `tag_value`, `tag_target_path` query parameters. \nIn case no such parameter is provided then all ITEM_TAG will be retrieved.\n\nThis will return an empty list when there is no matching ITEM_TAG associated with any target within given EHR.\n  \nMore then one ITEM_TAG may be associated with a single target, in which case they are uniquely identified \nby their `key` and `target_path` pair attributes.\n"
					},
					"response": [
						{
							"id": "2f549f2b-93f0-4f6c-88a9-16f3e5675f40",
							"name": "`200 OK` is returned when the requested ITEM_TAG list is successfully retrieved.\n",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/tags?tag_key=<string>&tag_value=<string>&tag_target_path=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"tags"
									],
									"query": [
										{
											"key": "tag_key",
											"value": "<string>"
										},
										{
											"key": "tag_value",
											"value": "<string>"
										},
										{
											"key": "tag_target_path",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "[\n  {\n    \"key\": \"<string>\",\n    \"target\": {\n      \"namespace\": \"<string>\",\n      \"type\": \"<string>\",\n      \"id\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      }\n    },\n    \"owner_id\": {\n      \"namespace\": \"<string>\",\n      \"type\": \"<string>\",\n      \"id\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      }\n    },\n    \"value\": \"<string>\",\n    \"target_path\": \"<string>\"\n  },\n  {\n    \"key\": \"<string>\",\n    \"target\": {\n      \"namespace\": \"<string>\",\n      \"type\": \"<string>\",\n      \"id\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      }\n    },\n    \"owner_id\": {\n      \"namespace\": \"<string>\",\n      \"type\": \"<string>\",\n      \"id\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      }\n    },\n    \"value\": \"<string>\",\n    \"target_path\": \"<string>\"\n  }\n]"
						},
						{
							"id": "886932c3-32bd-44f1-a786-9e35b44d128a",
							"name": "`400 Bad Request` is returned when the request could not be parsed or is invalid (e.g. malformed request URL syntax, missing required header or parameter, or syntactically invalid header, parameter or content). \nThe response body MAY contain error details",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/tags?tag_key=<string>&tag_value=<string>&tag_target_path=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"tags"
									],
									"query": [
										{
											"key": "tag_key",
											"value": "<string>"
										},
										{
											"key": "tag_value",
											"value": "<string>"
										},
										{
											"key": "tag_target_path",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"message\": \"<string>\",\n  \"validationErrors\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}"
						},
						{
							"id": "d3493f7c-c8c0-4aee-9e53-4b144df68f8f",
							"name": "`404 Not Found` is returned when an EHR with `ehr_id` does not exist.\n",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/tags?tag_key=<string>&tag_value=<string>&tag_target_path=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"tags"
									],
									"query": [
										{
											"key": "tag_key",
											"value": "<string>"
										},
										{
											"key": "tag_value",
											"value": "<string>"
										},
										{
											"key": "tag_target_path",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "ehr_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Get COMPOSITION tags",
					"id": "9b64d9c4-26c6-4c70-9a3e-43eee5ce85c2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/ehr/:ehr_id/composition/:uid_based_id/tags",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ehr",
								":ehr_id",
								"composition",
								":uid_based_id",
								"tags"
							],
							"variable": [
								{
									"id": "7a16ab76-a68a-4ec9-aea4-854b3dadc57b",
									"key": "ehr_id",
									"value": "<uuid>",
									"description": "(Required) EHR identifier taken from EHR.ehr_id.value.\n"
								},
								{
									"id": "859a3ae3-e9c1-4d58-96ec-f6fc7912d70d",
									"key": "uid_based_id",
									"value": "<string>",
									"description": "(Required) An abstract identifier: it can take a form of an OBJECT_VERSION_ID identifier taken from VERSION.uid.value (i.e. a `version_uid`), or a form of a HIER_OBJECT_ID identifier taken from VERSIONED_OBJECT.uid.value (i.e. a `versioned_object_uid`).\n"
								}
							]
						},
						"description": "Retrieves the list of all ITEM_TAG resources associated with a given target COMPOSITION version or \nVERSIONED_COMPOSITION identified by `uid_based_id` and owned by EHR identified by `ehr_id`.\n\nThe `uid_based_id` can take a form of an OBJECT_VERSION_ID identifier taken from VERSION.uid.value (i.e. a `version_uid`), \nor a form of a HIER_OBJECT_ID identifier taken from VERSIONED_OBJECT.uid.value (i.e. a `versioned_object_uid`).\nThe former is used to get the tags of a particular (target) version of the COMPOSITION version (e.g. one identified by `8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1`),\nwhereas the later (e.g. an identifier like `8849182c-82ad-4088-a07f-48ead4180515`) is be used to get the tags of the target VERSIONED_COMPOSITION container, \nwhich semantically are equivalent to tags targeting the latest version.\n\nThis will return an empty list when there is no ITEM_TAG associated with the given target.\n  \nMore then one ITEM_TAG may be associated with a single target COMPOSITION or VERSIONED_COMPOSITION, in which case they are uniquely identified \nby their `key` and `target_path` pair attributes.\n"
					},
					"response": [
						{
							"id": "2891fa12-83ee-46dd-ad5c-26d001010b1b",
							"name": "`200 OK` is returned when the requested ITEM_TAG list is successfully retrieved.\n",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/composition/:uid_based_id/tags",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"composition",
										":uid_based_id",
										"tags"
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "uid_based_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "[\n  {\n    \"key\": \"<string>\",\n    \"target\": {\n      \"namespace\": \"<string>\",\n      \"type\": \"<string>\",\n      \"id\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      }\n    },\n    \"owner_id\": {\n      \"namespace\": \"<string>\",\n      \"type\": \"<string>\",\n      \"id\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      }\n    },\n    \"value\": \"<string>\",\n    \"target_path\": \"<string>\"\n  },\n  {\n    \"key\": \"<string>\",\n    \"target\": {\n      \"namespace\": \"<string>\",\n      \"type\": \"<string>\",\n      \"id\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      }\n    },\n    \"owner_id\": {\n      \"namespace\": \"<string>\",\n      \"type\": \"<string>\",\n      \"id\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      }\n    },\n    \"value\": \"<string>\",\n    \"target_path\": \"<string>\"\n  }\n]"
						},
						{
							"id": "707e225e-2a30-4dd5-9818-f6c6efbfa8ba",
							"name": "`404 Not Found` is returned when an EHR with `ehr_id` does not exist, or when the `uid_based_id` does not exist.\n",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/composition/:uid_based_id/tags",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"composition",
										":uid_based_id",
										"tags"
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "uid_based_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Update COMPOSITION tags",
					"id": "4e5cc0c7-1640-4cde-bfa9-baefa7aa89f2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
								"key": "Prefer",
								"value": "return=minimal"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"key\": \"<string>\",\n    \"value\": \"<string>\",\n    \"target_path\": \"<string>\"\n  },\n  {\n    \"key\": \"<string>\",\n    \"value\": \"<string>\",\n    \"target_path\": \"<string>\"\n  }\n]",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ehr/:ehr_id/composition/:uid_based_id/tags",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ehr",
								":ehr_id",
								"composition",
								":uid_based_id",
								"tags"
							],
							"variable": [
								{
									"id": "bebd3456-fe7a-41f4-b7d2-7260422c015e",
									"key": "ehr_id",
									"value": "<uuid>",
									"description": "(Required) EHR identifier taken from EHR.ehr_id.value.\n"
								},
								{
									"id": "47119473-bc63-477a-ae6e-08d15240881b",
									"key": "uid_based_id",
									"value": "<string>",
									"description": "(Required) An abstract identifier: it can take a form of an OBJECT_VERSION_ID identifier taken from VERSION.uid.value (i.e. a `version_uid`), or a form of a HIER_OBJECT_ID identifier taken from VERSIONED_OBJECT.uid.value (i.e. a `versioned_object_uid`).\n"
								}
							]
						},
						"description": "Updates the list of all ITEM_TAG resources associated with a given target COMPOSITION version or \nVERSIONED_COMPOSITION identified by `uid_based_id` and owned by EHR identified by `ehr_id`.\n\nThe `uid_based_id` can take a form of an OBJECT_VERSION_ID identifier taken from VERSION.uid.value (i.e. a `version_uid`), \nor a form of a HIER_OBJECT_ID identifier taken from VERSIONED_OBJECT.uid.value (i.e. a `versioned_object_uid`).\nThe former is used to update the tags of a particular COMPOSITION version (e.g. one identified by `8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1`),\nwhereas the later (e.g. an identifier like `8849182c-82ad-4088-a07f-48ead4180515`) is be used to update the tags of the target VERSIONED_COMPOSITION container, \nwhich semantically are equivalent to tags targeting the latest version.\n  \nProviding an empty list will effectively remove all ITEM_TAG associated with the given target.\n\nMore then one ITEM_TAG may be associated with a single target, in which case they are uniquely identified \nby their `key` and `target_path` pair attributes.\n"
					},
					"response": [
						{
							"id": "5b66f622-d1dc-4798-b4e7-95bc1ea69ee1",
							"name": "`200 OK` is returned when the requested ITEM_TAG list is successfully retrieved.\n",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"key\": \"<string>\",\n    \"value\": \"<string>\",\n    \"target_path\": \"<string>\"\n  },\n  {\n    \"key\": \"<string>\",\n    \"value\": \"<string>\",\n    \"target_path\": \"<string>\"\n  }\n]",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/composition/:uid_based_id/tags",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"composition",
										":uid_based_id",
										"tags"
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "uid_based_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "[\n  {\n    \"key\": \"<string>\",\n    \"target\": {\n      \"namespace\": \"<string>\",\n      \"type\": \"<string>\",\n      \"id\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      }\n    },\n    \"owner_id\": {\n      \"namespace\": \"<string>\",\n      \"type\": \"<string>\",\n      \"id\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      }\n    },\n    \"value\": \"<string>\",\n    \"target_path\": \"<string>\"\n  },\n  {\n    \"key\": \"<string>\",\n    \"target\": {\n      \"namespace\": \"<string>\",\n      \"type\": \"<string>\",\n      \"id\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      }\n    },\n    \"owner_id\": {\n      \"namespace\": \"<string>\",\n      \"type\": \"<string>\",\n      \"id\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      }\n    },\n    \"value\": \"<string>\",\n    \"target_path\": \"<string>\"\n  }\n]"
						},
						{
							"id": "e4577598-1792-45f0-ae50-e8fbfaf98a6b",
							"name": "`204 No Content` is returned when the update operation was successful and the `Prefer` header is missing or is set to `return=minimal`.\n",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"key\": \"<string>\",\n    \"value\": \"<string>\",\n    \"target_path\": \"<string>\"\n  },\n  {\n    \"key\": \"<string>\",\n    \"value\": \"<string>\",\n    \"target_path\": \"<string>\"\n  }\n]",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/composition/:uid_based_id/tags",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"composition",
										":uid_based_id",
										"tags"
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "uid_based_id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "ede684db-203e-43d4-9200-01758e088acc",
							"name": "`400 Bad Request` is returned when the request could not be parsed or is invalid (e.g. malformed request URL syntax, missing required header or parameter, or syntactically invalid header, parameter or content). \nThe response body MAY contain error details",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"key\": \"<string>\",\n    \"value\": \"<string>\",\n    \"target_path\": \"<string>\"\n  },\n  {\n    \"key\": \"<string>\",\n    \"value\": \"<string>\",\n    \"target_path\": \"<string>\"\n  }\n]",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/composition/:uid_based_id/tags",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"composition",
										":uid_based_id",
										"tags"
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "uid_based_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"message\": \"<string>\",\n  \"validationErrors\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}"
						},
						{
							"id": "5e9f9794-f07f-4de1-8220-7e6233588576",
							"name": "`404 Not Found` is returned when an EHR with `ehr_id` does not exist, or when the `uid_based_id` does not exist.\n",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"key\": \"<string>\",\n    \"value\": \"<string>\",\n    \"target_path\": \"<string>\"\n  },\n  {\n    \"key\": \"<string>\",\n    \"value\": \"<string>\",\n    \"target_path\": \"<string>\"\n  }\n]",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/composition/:uid_based_id/tags",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"composition",
										":uid_based_id",
										"tags"
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "uid_based_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Delete COMPOSITION tags",
					"id": "b10c141c-6fa4-44a5-a67c-bd27e7efde69",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ehr/:ehr_id/composition/:uid_based_id/tags/:key",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ehr",
								":ehr_id",
								"composition",
								":uid_based_id",
								"tags",
								":key"
							],
							"variable": [
								{
									"id": "9d35028f-7026-443a-9a41-8f38266ce26a",
									"key": "ehr_id",
									"value": "<uuid>",
									"description": "(Required) EHR identifier taken from EHR.ehr_id.value.\n"
								},
								{
									"id": "003e6fe8-cbac-4d6d-8a7c-7e1c1f8d271d",
									"key": "uid_based_id",
									"value": "<string>",
									"description": "(Required) An abstract identifier: it can take a form of an OBJECT_VERSION_ID identifier taken from VERSION.uid.value (i.e. a `version_uid`), or a form of a HIER_OBJECT_ID identifier taken from VERSIONED_OBJECT.uid.value (i.e. a `versioned_object_uid`).\n"
								},
								{
									"id": "fa1402d0-d035-4763-9aac-fcbd6e34f9d3",
									"key": "key",
									"value": "<string>",
									"description": "(Required) The ITEM_TAG key.\n"
								}
							]
						},
						"description": "Deletes the ITEM_TAG resource(s) identified by `tag_key`, associated with a given target COMPOSITION version or \nVERSIONED_COMPOSITION identified by `uid_based_id` and owned by EHR identified by `ehr_id`.\n\nThe `uid_based_id` can take a form of an OBJECT_VERSION_ID identifier taken from VERSION.uid.value (i.e. a `version_uid`),\nor a form of a HIER_OBJECT_ID identifier taken from VERSIONED_OBJECT.uid.value (i.e. a `versioned_object_uid`).\nThe former is used to delete the tags a particular (target) version of the COMPOSITION version (e.g. one identified by `8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1`),\nwhereas the later (e.g. an identifier like `8849182c-82ad-4088-a07f-48ead4180515`) is be used to delete the tags of the target VERSIONED_COMPOSITION container,\nwhich semantically are equivalent to tags targeting the latest version.\n"
					},
					"response": [
						{
							"id": "f48f02b5-cc5f-4b6a-9542-edc85dc160be",
							"name": "`204 No Content` is returned when the resource identified by the request parameters has been (logically) deleted.\n",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/composition/:uid_based_id/tags/:key",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"composition",
										":uid_based_id",
										"tags",
										":key"
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "uid_based_id"
										},
										{
											"key": "key"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "9d49f8be-960e-4f7a-b87f-071187857a4b",
							"name": "`404 Not Found` is returned when an EHR with `ehr_id` does not exist, or when the `uid_based_id` does not exist, or when the ITEM_TAG identified by the `key` does not exist.\n",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/composition/:uid_based_id/tags/:key",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"composition",
										":uid_based_id",
										"tags",
										":key"
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "uid_based_id"
										},
										{
											"key": "key"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Get EHR_STATUS tags",
					"id": "e71d44ac-095b-4565-9018-caa4f4fc41a6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/ehr/:ehr_id/ehr_status/:uid_based_id/tags",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ehr",
								":ehr_id",
								"ehr_status",
								":uid_based_id",
								"tags"
							],
							"variable": [
								{
									"id": "985355ff-3c53-4ba8-acfa-acd92068df7e",
									"key": "ehr_id",
									"value": "<uuid>",
									"description": "(Required) EHR identifier taken from EHR.ehr_id.value.\n"
								},
								{
									"id": "e6fb2e19-ecab-44cc-a284-fc3c19f70701",
									"key": "uid_based_id",
									"value": "<string>",
									"description": "(Required) An abstract identifier: it can take a form of an OBJECT_VERSION_ID identifier taken from VERSION.uid.value (i.e. a `version_uid`), or a form of a HIER_OBJECT_ID identifier taken from VERSIONED_OBJECT.uid.value (i.e. a `versioned_object_uid`).\n"
								}
							]
						},
						"description": "Retrieves the list of all ITEM_TAG resources associated with a given target EHR_STATUS version or \nVERSIONED_EHR_STATUS identified by `uid_based_id` and owned by EHR identified by `ehr_id`.\n\nThe `uid_based_id` can take a form of an OBJECT_VERSION_ID identifier taken from VERSION.uid.value (i.e. a `version_uid`), \nor a form of a HIER_OBJECT_ID identifier taken from VERSIONED_OBJECT.uid.value (i.e. a `versioned_object_uid`).\nThe former is used to get the tags of a particular (target) version of the EHR_STATUS version (e.g. one identified by `8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1`),\nwhereas the later (e.g. an identifier like `8849182c-82ad-4088-a07f-48ead4180515`) is be used to get the tags of the target VERSIONED_EHR_STATUS container, \nwhich semantically are equivalent to tags targeting the latest version.\n\nThis will return an empty list when there is no ITEM_TAG associated with the given target.\n  \nMore then one ITEM_TAG may be associated with a single target EHR_STATUS or VERSIONED_EHR_STATUS, in which case they are uniquely identified \nby their `key` and `target_path` pair attributes.\n"
					},
					"response": [
						{
							"id": "a736ea67-66f7-4242-bc6f-dede9f0028ac",
							"name": "`200 OK` is returned when the requested ITEM_TAG list is successfully retrieved.\n",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/ehr_status/:uid_based_id/tags",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"ehr_status",
										":uid_based_id",
										"tags"
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "uid_based_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "[\n  {\n    \"key\": \"<string>\",\n    \"target\": {\n      \"namespace\": \"<string>\",\n      \"type\": \"<string>\",\n      \"id\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      }\n    },\n    \"owner_id\": {\n      \"namespace\": \"<string>\",\n      \"type\": \"<string>\",\n      \"id\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      }\n    },\n    \"value\": \"<string>\",\n    \"target_path\": \"<string>\"\n  },\n  {\n    \"key\": \"<string>\",\n    \"target\": {\n      \"namespace\": \"<string>\",\n      \"type\": \"<string>\",\n      \"id\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      }\n    },\n    \"owner_id\": {\n      \"namespace\": \"<string>\",\n      \"type\": \"<string>\",\n      \"id\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      }\n    },\n    \"value\": \"<string>\",\n    \"target_path\": \"<string>\"\n  }\n]"
						},
						{
							"id": "9394f0db-9763-4205-a758-b6afedb3c3c4",
							"name": "`404 Not Found` is returned when an EHR with `ehr_id` does not exist, or when the `uid_based_id` does not exist.\n",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/ehr_status/:uid_based_id/tags",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"ehr_status",
										":uid_based_id",
										"tags"
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "uid_based_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Update EHR_STATUS tags",
					"id": "f334e402-57b5-4add-9cbc-feecee65d12a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
								"key": "Prefer",
								"value": "return=minimal"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"key\": \"<string>\",\n    \"value\": \"<string>\",\n    \"target_path\": \"<string>\"\n  },\n  {\n    \"key\": \"<string>\",\n    \"value\": \"<string>\",\n    \"target_path\": \"<string>\"\n  }\n]",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ehr/:ehr_id/ehr_status/:uid_based_id/tags",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ehr",
								":ehr_id",
								"ehr_status",
								":uid_based_id",
								"tags"
							],
							"variable": [
								{
									"id": "ad20ade0-67aa-4b5d-b4ed-91f4db5d54d8",
									"key": "ehr_id",
									"value": "<uuid>",
									"description": "(Required) EHR identifier taken from EHR.ehr_id.value.\n"
								},
								{
									"id": "7e715ebf-d67a-498e-b8bf-62904c5ab782",
									"key": "uid_based_id",
									"value": "<string>",
									"description": "(Required) An abstract identifier: it can take a form of an OBJECT_VERSION_ID identifier taken from VERSION.uid.value (i.e. a `version_uid`), or a form of a HIER_OBJECT_ID identifier taken from VERSIONED_OBJECT.uid.value (i.e. a `versioned_object_uid`).\n"
								}
							]
						},
						"description": "Updates the list of all ITEM_TAG resources associated with a given target EHR_STATUS version or \nVERSIONED_EHR_STATUS identified by `uid_based_id` and owned by EHR identified by `ehr_id`.\n\nThe `uid_based_id` can take a form of an OBJECT_VERSION_ID identifier taken from VERSION.uid.value (i.e. a `version_uid`), \nor a form of a HIER_OBJECT_ID identifier taken from VERSIONED_OBJECT.uid.value (i.e. a `versioned_object_uid`).\nThe former is used to update the tags of a particular EHR_STATUS version (e.g. one identified by `8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1`),\nwhereas the later (e.g. an identifier like `8849182c-82ad-4088-a07f-48ead4180515`) is be used to update the tags of the target VERSIONED_EHR_STATUS container, \nwhich semantically are equivalent to tags targeting the latest version.\n  \nProviding an empty list will effectively remove all ITEM_TAG associated with the given target.\n\nMore then one ITEM_TAG may be associated with a single target, in which case they are uniquely identified \nby their `key` and `target_path` pair attributes.\n"
					},
					"response": [
						{
							"id": "3cfb4ee1-e316-427c-a661-cbc09c413cc1",
							"name": "`200 OK` is returned when the requested ITEM_TAG list is successfully retrieved.\n",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"key\": \"<string>\",\n    \"value\": \"<string>\",\n    \"target_path\": \"<string>\"\n  },\n  {\n    \"key\": \"<string>\",\n    \"value\": \"<string>\",\n    \"target_path\": \"<string>\"\n  }\n]",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/ehr_status/:uid_based_id/tags",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"ehr_status",
										":uid_based_id",
										"tags"
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "uid_based_id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "[\n  {\n    \"key\": \"<string>\",\n    \"target\": {\n      \"namespace\": \"<string>\",\n      \"type\": \"<string>\",\n      \"id\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      }\n    },\n    \"owner_id\": {\n      \"namespace\": \"<string>\",\n      \"type\": \"<string>\",\n      \"id\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      }\n    },\n    \"value\": \"<string>\",\n    \"target_path\": \"<string>\"\n  },\n  {\n    \"key\": \"<string>\",\n    \"target\": {\n      \"namespace\": \"<string>\",\n      \"type\": \"<string>\",\n      \"id\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      }\n    },\n    \"owner_id\": {\n      \"namespace\": \"<string>\",\n      \"type\": \"<string>\",\n      \"id\": {\n        \"value\": \"<string>\",\n        \"_type\": \"<string>\"\n      }\n    },\n    \"value\": \"<string>\",\n    \"target_path\": \"<string>\"\n  }\n]"
						},
						{
							"id": "5aa4abf2-726c-4b46-b8be-5b4033f1e347",
							"name": "`204 No Content` is returned when the update operation was successful and the `Prefer` header is missing or is set to `return=minimal`.\n",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"key\": \"<string>\",\n    \"value\": \"<string>\",\n    \"target_path\": \"<string>\"\n  },\n  {\n    \"key\": \"<string>\",\n    \"value\": \"<string>\",\n    \"target_path\": \"<string>\"\n  }\n]",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/ehr_status/:uid_based_id/tags",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"ehr_status",
										":uid_based_id",
										"tags"
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "uid_based_id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "f704d98c-b2d2-4159-8ca0-2f75feb114e4",
							"name": "`400 Bad Request` is returned when the request could not be parsed or is invalid (e.g. malformed request URL syntax, missing required header or parameter, or syntactically invalid header, parameter or content). \nThe response body MAY contain error details",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"key\": \"<string>\",\n    \"value\": \"<string>\",\n    \"target_path\": \"<string>\"\n  },\n  {\n    \"key\": \"<string>\",\n    \"value\": \"<string>\",\n    \"target_path\": \"<string>\"\n  }\n]",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/ehr_status/:uid_based_id/tags",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"ehr_status",
										":uid_based_id",
										"tags"
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "uid_based_id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"message\": \"<string>\",\n  \"validationErrors\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}"
						},
						{
							"id": "97aabb36-8d29-4286-9f53-db69f463adbc",
							"name": "`404 Not Found` is returned when an EHR with `ehr_id` does not exist, or when the `uid_based_id` does not exist.\n",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Request header to indicate the preference over response details.\nThe response will contain the entire resource when the `Prefer` header has a value of `return=representation`.\n",
										"key": "Prefer",
										"value": "return=minimal"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"key\": \"<string>\",\n    \"value\": \"<string>\",\n    \"target_path\": \"<string>\"\n  },\n  {\n    \"key\": \"<string>\",\n    \"value\": \"<string>\",\n    \"target_path\": \"<string>\"\n  }\n]",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/ehr_status/:uid_based_id/tags",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"ehr_status",
										":uid_based_id",
										"tags"
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "uid_based_id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "Delete EHR_STATUS tags",
					"id": "45547149-bc75-453e-a1b7-54bae928039e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ehr/:ehr_id/ehr_status/:uid_based_id/tags/:key",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ehr",
								":ehr_id",
								"ehr_status",
								":uid_based_id",
								"tags",
								":key"
							],
							"variable": [
								{
									"id": "88c5bf3b-e4c8-4831-af90-fb29dc048e58",
									"key": "ehr_id",
									"value": "<uuid>",
									"description": "(Required) EHR identifier taken from EHR.ehr_id.value.\n"
								},
								{
									"id": "17f49b54-754f-4d36-93c2-676d9cfde5fb",
									"key": "uid_based_id",
									"value": "<string>",
									"description": "(Required) An abstract identifier: it can take a form of an OBJECT_VERSION_ID identifier taken from VERSION.uid.value (i.e. a `version_uid`), or a form of a HIER_OBJECT_ID identifier taken from VERSIONED_OBJECT.uid.value (i.e. a `versioned_object_uid`).\n"
								},
								{
									"id": "825189b8-73a0-4af9-ad1f-cf9dbefbe7de",
									"key": "key",
									"value": "<string>",
									"description": "(Required) The ITEM_TAG key.\n"
								}
							]
						},
						"description": "Deletes the ITEM_TAG resource(s) identified by `tag_key`, associated with a given target EHR_STATUS version or \nVERSIONED_EHR_STATUS identified by `uid_based_id` and owned by EHR identified by `ehr_id`.\n\nThe `uid_based_id` can take a form of an OBJECT_VERSION_ID identifier taken from VERSION.uid.value (i.e. a `version_uid`),\nor a form of a HIER_OBJECT_ID identifier taken from VERSIONED_OBJECT.uid.value (i.e. a `versioned_object_uid`).\nThe former is used to delete the tags a particular (target) version of the EHR_STATUS version (e.g. one identified by `8849182c-82ad-4088-a07f-48ead4180515::openEHRSys.example.com::1`),\nwhereas the later (e.g. an identifier like `8849182c-82ad-4088-a07f-48ead4180515`) is be used to delete the tags of the target VERSIONED_EHR_STATUS container,\nwhich semantically are equivalent to tags targeting the latest version.\n"
					},
					"response": [
						{
							"id": "7cdc5483-2dc1-4f6d-8438-7826ed4765d9",
							"name": "`204 No Content` is returned when the resource identified by the request parameters has been (logically) deleted.\n",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/ehr_status/:uid_based_id/tags/:key",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"ehr_status",
										":uid_based_id",
										"tags",
										":key"
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "uid_based_id"
										},
										{
											"key": "key"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						},
						{
							"id": "12d46883-f267-4ff2-96cd-3b5ce7b3a056",
							"name": "`404 Not Found` is returned when an EHR with `ehr_id` does not exist, or when the `uid_based_id` does not exist, or when the ITEM_TAG identified by the `key` does not exist.\n",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ehr/:ehr_id/ehr_status/:uid_based_id/tags/:key",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ehr",
										":ehr_id",
										"ehr_status",
										":uid_based_id",
										"tags",
										":key"
									],
									"variable": [
										{
											"key": "ehr_id"
										},
										{
											"key": "uid_based_id"
										},
										{
											"key": "key"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				}
			],
			"id": "567ac701-de95-4196-8b80-fac08b9dd1e5",
			"description": "Management of [ITEM_TAG](https://specifications.openehr.org/releases/RM/development/common.html#_item_tag_class) resources.\n"
		},
		{
			"name": "CONTENT_ITEM_schema",
			"item": [],
			"id": "ad2a3cfe-cf13-4f10-a210-11332c6ad125",
			"description": "The abstract `CONTENT_ITEM` class:\n<SchemaDefinition schemaRef=\"#/components/schemas/ContentItem\" />\n"
		},
		{
			"name": "ITEM_schema",
			"item": [],
			"id": "e491dc99-5aba-430a-8167-6913039e199d",
			"description": "The abstract `ITEM` class:\n<SchemaDefinition schemaRef=\"#/components/schemas/Item\" />\n"
		},
		{
			"name": "ITEM_STRUCTURE_schema",
			"item": [],
			"id": "fce4e77b-541a-4689-bba2-c6120eca7fcd",
			"description": "The abstract `ITEM_STRUCTURE` class:\n<SchemaDefinition schemaRef=\"#/components/schemas/ItemStructure\" />\n"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "4decc612-8512-4942-a743-f8b8d1803688",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "1f67a511-49a6-41f1-b9c0-5aaf6f9f2178",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "openEHRSys.example.com"
		},
		{
			"key": "ehr_id",
			"value": "{{ehrId}}",
			"type": "string"
		}
	]
}